@charset "UTF-8";
/*------------------------------------*\
    PALM.CSS
\*------------------------------------*/
/**
 * Vars and core
 */
/*------------------------------------*\
    $VARS
\*------------------------------------*/
/**
 * Any variables you find set in inuit.cssâ€™ `_vars.scss` that you do not wish to
 * keep, simply redefine here. This means that if inuit.css, for example, sets
 * your `$base-font-size` at 16px and you wish it to be 14px, simply redeclare
 * that variable in this file. inuit.css ignores its own variables in favour of
 * using your own, so you can completely modify how inuit.css works without ever
 * having to alter the framework itself.
 */
/**
 * Font-sizes
 */
/*------------------------------------*\
    $OBJECTS-AND-ABSTRACTIONS
\*------------------------------------*/
/**
 * All of inuit.cssâ€™ objects and abstractions are initially turned off by
 * default. This means that you start any project with as little as possible,
 * and introducing objects and abstractions is as simple as switching the
 * following variables to `true`.
 */
/*------------------------------------*\
    $COLOURS
\*------------------------------------*/
/*------------------------------------*\
    $VARS
\*------------------------------------*/
/**
 * Override any of the Core or Inuit variables here
 */
/**
<% case MyopicVicar::Application.config.template_set %>
<% when 'freecen' %>
$project-color:           $lavender;
$project-color-faded:     $lavender-faded;
$project-color-on-light:  $lavender-on-light;
<% when 'freebmd' %>
$project-color:           $magenta;
$project-color-faded:     $magenta-faded;
$project-color-on-light:  $magenta-on-light;
<% when 'freereg' %>
*/
/**
<% else %>
$project-color:           $teal;
$project-color-faded:     $teal-faded;
$project-color-on-light:  $teal-on-light;
<% end%>
*/
/*------------------------------------*\
    PALM.CSS
\*------------------------------------*/
/**
 * Inuit
 */
/*------------------------------------*\
    INUIT.CSS
\*------------------------------------*/
/*!*
 *
 * inuitcss.com -- @inuitcss -- @csswizardry
 *
 */
/**
 * inuit.css acts as a base stylesheet which you should extend with your own
 * theme stylesheet.
 *
 * inuit.css aims to do the heavy lifting; sorting objects and abstractions,
 * design patterns and fiddly bits of CSS, whilst leaving as much design as
 * possible to you. inuit.css is the scaffolding to your decorator.
 *
 * This stylesheet is heavily documented and contains lots of comments, please
 * take care to read and refer to them as you build. For further support please
 * tweet at @inuitcss.
 *
 * Owing to the amount of comments please only ever use minified CSS in
 * production. This file is purely a dev document.
 *
 * The table of contents below maps to section titles of the same name, to jump
 * to any section simply run a find for $[SECTION-TITLE].
 *
 * Most objects and abstractions come with a chunk of markup that you should be
 * able to paste into any view to quickly see how the CSS works in conjunction
 * with the correct HTML.
 *
 * inuit.css is written to this standard: github.com/csswizardry/CSS-Guidelines
 *
 * LICENSE
 *
 * Copyright 2013 Harry Roberts
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Thank you for choosing inuit.css. May your web fonts render perfectly.
 */
/*------------------------------------*\
    $CONTENTS
\*------------------------------------*/
/**
 * CONTENTS............You’re reading it!
 * WARNING.............Here be dragons!
 * IMPORTS.............Begin importing the sections below
 *
 * MIXINS..............Super-simple Sass stuff
 * NORMALIZE...........normalize.css
 * RESET...............Set some defaults
 * CLEARFIX............
 * SHARED..............Shared declarations
 *
 * MAIN................High-level elements like `html`, `body`, etc.
 * HEADINGS............Double-stranded heading hierarchy
 * PARAGRAPHS..........
 * SMALLPRINT..........Smaller text elements like `small`
 * QUOTES..............
 * CODE................
 * LISTS...............
 * IMAGES..............
 * TABLES..............
 * FORMS...............
 *
 * GRIDS...............Fluid, proportional and nestable grids
 * FLEXBOX.............Crudely emulate flexbox
 * COLUMNS.............CSS3 columns
 * NAV.................A simple abstraction to put a list in horizontal nav mode
 * OPTIONS.............Grouped nav items
 * PAGINATION..........Very stripped back, basic paginator
 * BREADCRUMB..........Simple breadcrumb trail object
 * MEDIA...............Media object
 * MARGINALIA..........Simple marginalia content
 * ISLAND..............Boxed off content
 * BLOCK-LIST..........Blocky lists of content
 * MATRIX..............Gridded lists
 * SPLIT...............A simple split-in-two object
 * THIS-OR-THIS........Options object
 * LINK-COMPLEX........
 * FLYOUT..............Flyout-on-hover object
 * ARROWS..............CSS arrows
 * SPRITE..............Generic spriting element
 * ICON-TEXT...........Icon and text couplings
 * BEAUTONS............Use the beautons micro library
 * LOZENGES............Basic lozenge styles
 * RULES...............Horizontal rules
 * STATS...............Simple stats object
 * GREYBOX.............Wireframing styles
 *
 * WIDTHS..............Width classes for use alongside the grid system etc.
 * PUSH................Push classes for manipulating grids
 * PULL................Pull classes for manipulating grids
 * BRAND...............Helper class to apply brand treatment to elements
 * HELPER..............A series of helper classes to use arbitrarily
 * DEBUG...............Enable to add visual flags for debugging purposes
 */
/*------------------------------------*\
    $WARNING
\*------------------------------------*/
/*
 * inuit.css, being an OO framework, works in keeping with the open/closed
 * principle. The variables you set previously are now being used throughout
 * inuit.css to style everything we need for a base. Any custom styles SHOULD
 * NOT be added or modified in inuit.css directly, but added via your theme
 * stylesheet as per the open/closed principle:
 *
 * csswizardry.com/2012/06/the-open-closed-principle-applied-to-css
 *
 * Try not to edit any CSS beyond this point; if you find you need to do so
 * it is a failing of the framework so please tweet at @inuitcss.
 */
/*------------------------------------*\
    $IMPORTS
\*------------------------------------*/
/**
 * Generic utility styles etc.
 */
/*------------------------------------*\
    $DEFAULTS
\*------------------------------------*/
/**
 * inuit.css’ default variables. Redefine these in your `_vars.scss` file (found
 * in the inuit.css-web-template) to override them.
 */
/*------------------------------------*\
    $DEBUG
\*------------------------------------*/
/**
 * Debug mode will visually highlight any potential markup/accessibility quirks
 * in the browser. Set to `true` or `false`.
 */
/*------------------------------------*\
    $BORDER-BOX
\*------------------------------------*/
/**
 * Do you want all elements to adopt `box-sizing:border-box;` as per
 * paulirish.com/2012/box-sizing-border-box-ftw ?
 */
/*------------------------------------*\
    $BASE
\*------------------------------------*/
/**
 * Base stuff
 */
/**
 * Base font-family.
 */
/**
 * Default colour for objects’ borders etc.
 */
/*------------------------------------*\
    $RESPONSIVE
\*------------------------------------*/
/**
 * Responsiveness?
 */
/**
 * Responsiveness for widescreen/high resolution desktop monitors and beyond?
 * Note: `$responsive` variable above must be set to true before enabling this.
 */
/**
 * Responsive push and pull produce a LOT of code, only turn them on if you
 * definitely need them.
 */
/**
 * Note: `$push` variable above must be set to true before enabling these.
 */
/**
 * Note: `$pull` variable above must be set to true before enabling these.
 */
/**
 * Tell inuit.css when breakpoints start.
 */
/*------------------------------------*\
    $FONT-SIZES
\*------------------------------------*/
/**
 * Font-sizes (in pixels). Refer to relevant sections for their implementations.
 */
/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * English quote marks?
 */
/**
 * If you want English quotes then please do not edit these; they’re only here
 * because Sass needs them.
 */
/**
 * If you need non-English quotes, please alter the following values accordingly:
 */
/*------------------------------------*\
    $BRAND
\*------------------------------------*/
/**
 * Brand stuff
 */
/**
 * How big would you like round corners to be by default?
 */
/*------------------------------------*\
    $OBJECTS AND ABSTRACTIONS
\*------------------------------------*/
/**
 * Which objects and abstractions would you like to use?
 */
/*------------------------------------*\
    $FRAMEWORK
\*------------------------------------*/
/**
 * inuit.css will work these next ones out for use within the framework.
 *
 * Assign our `$base-line-height` to a new spacing var for more transparency.
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
/**
 * Style any number of headings in one fell swoop, e.g.:
 *
   .foo{
       @include headings(1, 3){
           color:#BADA55;
       }
    }
 *
 * With thanks to @lar_zzz, @paranoida, @rowanmanning and ultimately
 * @thierrylemoulec for refining and improving my initial mixin.
 */
/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 *
   .foo{
       @include vendor(animation, shrink 3s);
   }

   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 *
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
/**
 * Force overly long spans of text to truncate, e.g.:
 *
   `@include truncate(100%);`
 *
 * Where `$truncation-boundary` is a united measurement.
 */
/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 *
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 *
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 *
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 *
 * `@include arrow(top, left, red)`
 *
 * for just a single, red arrow, or:
 *
 * `@include arrow(bottom, center, red, black)`
 *
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus:
 *
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 *
 */
/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */
/*! normalize.css v2.1.0 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/*
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

/*
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block;
}

/*
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/*
 * Address styling not present in IE 8/9.
 */
[hidden] {
  display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */
/*
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 2 */
}

/*
 * Remove default margin.
 */
body {
  margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */
/*
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted;
}

/*
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */
/*
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/*
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/*
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/*
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic;
}

/*
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/*
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/*
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em;
}

/*
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap;
}

/*
 * Set consistent quote types.
 */
q {
  quotes: "“" "”" "‘" "’";
}

/*
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/*
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */
/*
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0;
}

/*
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */
/*
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */
/*
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/*
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/*
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */
}

/*
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal;
}

/*
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none;
}

/*
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type=button],
input[type=reset],
input[type=submit] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/*
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/*
 * 1. Address box sizing set to `content-box` in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 */
input[type=checkbox],
input[type=radio] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/*
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type=search] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box;
}

/*
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type=search]::-webkit-search-cancel-button,
input[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/*
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */
/*
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/*------------------------------------*\
    $RESET
\*------------------------------------*/
/**
 * A more considered reset; more of a restart...
 * As per: csswizardry.com/2011/10/reset-restarted
 */
/**
* Let’s make the box model all nice, shall we...?
*/
*, *:before, *:after {
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box;
}

/**
 * The usual...
 */
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0;
}

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title], dfn[title] {
  cursor: help;
}

/**
 * Remove underlines from potentially troublesome elements.
 */
u, ins {
  text-decoration: none;
}

/**
 * Apply faux underline via `border-bottom`.
 */
ins {
  border-bottom: 1px solid;
}

/**
 * So that `alt` text is visually offset if images don’t load.
 */
img {
  font-style: italic;
}

/**
 * Give form elements some cursor interactions...
 */
label,
input,
textarea,
button,
select,
option {
  cursor: pointer;
}

.text-input:active, .select:active,
.text-input:focus,
.select:focus,
textarea:active,
textarea:focus {
  cursor: text;
  outline: none;
}

/*------------------------------------*\
    $CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 */
.cf:after, .stat-group:after, .multi-list:after, .boxed-nav:after, .matrix:after, .island:after, .banner:after,
.islet:after,
.twitter:after, .media:after, .nav:after, .icon-list:after, .site__header__nav .social-links ul:after, .site__header__nav .main-nav ul:after, .twitter__tools:after, .validation-list:after, .pagination:after, .sub-nav ul:after, .sub-nav:after {
  content: "";
  display: table;
  clear: both;
}

/*------------------------------------*\
    $SHARED
\*------------------------------------*/
/**
 * Where `margin-bottom` is concerned, this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
/**
 * Base elements
 */
h1, h2, h3, h4, h5, h6, hgroup,
ul, ol, dl,
blockquote, p, address,
table,
fieldset, figure,
pre,
.form-fields > li,
.media,
.island,
.banner,
.islet,
.twitter {
  margin-bottom: 28px;
  margin-bottom: 1.5555555556rem;
}
.islet h1, .twitter h1, .islet h2, .twitter h2, .islet h3, .twitter h3, .islet h4, .twitter h4, .islet h5, .twitter h5, .islet h6, .twitter h6, .islet hgroup, .twitter hgroup,
.islet ul,
.twitter ul, .islet ol, .twitter ol, .islet dl, .twitter dl,
.islet blockquote,
.twitter blockquote, .islet p, .twitter p, .islet address, .twitter address,
.islet table,
.twitter table,
.islet fieldset,
.twitter fieldset, .islet figure, .twitter figure,
.islet pre,
.twitter pre,
.islet .form-fields > li,
.twitter .form-fields > li,
.islet .media,
.twitter .media,
.islet .island,
.twitter .island,
.islet .banner,
.twitter .banner,
.islet .islet,
.twitter .islet,
.islet .twitter,
.twitter .twitter {
  margin-bottom: 14px;
  margin-bottom: 0.7777777778rem;
}

/**
 * Doubled up `margin-bottom` helper class.
 */
.landmark {
  margin-bottom: 56px;
  margin-bottom: 3.1111111111rem;
}

/**
 * `hr` elements only take up a few pixels, so we need to give them special
 * treatment regarding vertical rhythm.
 */
hr {
  margin-bottom: 26px;
  margin-bottom: 1.4444444444rem;
}

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once, here.
 */
ul, ol, dd {
  margin-left: 56px;
  margin-left: 3.1111111111rem;
}

/**
 * Base styles; unclassed HTML elements etc.
 */
/*------------------------------------*\
    $MAIN
\*------------------------------------*/
html {
  font: 1.125em/1.5555555556 sans-serif;
  overflow-y: scroll;
  min-height: 100%;
}

/*------------------------------------*\
    $HEADINGS
\*------------------------------------*/
/**
 * As per: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css
 *
 * When we define a heading we also define a corresponding class to go with it.
 * This allows us to apply, say, `class=alpha` to a `h3`; a double-stranded
 * heading hierarchy.
 */
h1, .alpha {
  font-size: 36px;
  font-size: 2rem;
  line-height: 1.5555555556;
}

h2, .beta {
  font-size: 32px;
  font-size: 1.7777777778rem;
  line-height: 1.75;
}

h3, .gamma {
  font-size: 22px;
  font-size: 1.2222222222rem;
  line-height: 1.2727272727;
}

h4, .delta {
  font-size: 20px;
  font-size: 1.1111111111rem;
  line-height: 1.4;
}

h5, .epsilon {
  font-size: 18px;
  font-size: 1rem;
  line-height: 1.5555555556;
}

h6, .zeta {
  font-size: 14px;
  font-size: 0.7777777778rem;
  line-height: 2;
}

/**
 * Heading groups and generic any-heading class.
 * To target any heading of any level simply apply a class of `.hN`, e.g.:
 *
   <hgroup>
       <h1 class=hN>inuit.css</h1>
       <h2 class=hN>Best. Framework. Ever!</h2>
   </hgroup>
 *
 */
hgroup .hN {
  margin-bottom: 0;
}

/**
 * A series of classes for setting massive type; for use in heroes, mastheads,
 * promos, etc.
 */
.giga {
  font-size: 96px;
  font-size: 5.3333333333rem;
  line-height: 1.1666666667;
}

.mega {
  font-size: 72px;
  font-size: 4rem;
  line-height: 1.1666666667;
}

.kilo {
  font-size: 60px;
  font-size: 3.3333333333rem;
  line-height: 1.4;
}

/*------------------------------------*\
    $PARAGRAPHS
\*------------------------------------*/
/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger.
 */
.lede,
.lead {
  font-size: 20.25px;
  font-size: 1.125rem;
  line-height: 1.3827160494;
}

/*------------------------------------*\
    $SMALLPRINT
\*------------------------------------*/
/**
 * A series of classes for setting tiny type; for use in smallprint etc.
 */
.smallprint,
.milli {
  font-size: 13px;
  font-size: 0.7222222222rem;
  line-height: 2.1538461538;
}

.micro {
  font-size: 12px;
  font-size: 0.6666666667rem;
  line-height: 2.3333333333;
}

/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * If English quotes are set in `_vars.scss`, define them here.
 */
/**
 * Big up @boblet: html5doctor.com/blockquote-q-cite
 */
/**
 * Inline quotes.
 */
q {
  quotes: "‘" "’" "“" "”";
}
q:before {
  content: "‘";
  content: open-quote;
}
q:after {
  content: "’";
  content: close-quote;
}
q q:before {
  content: "“";
  content: open-quote;
}
q q:after {
  content: "”";
  content: close-quote;
}

blockquote {
  quotes: "“" "”";
}
blockquote p:before {
  content: "“";
  content: open-quote;
}
blockquote p:after {
  content: "";
  content: no-close-quote;
}
blockquote p:last-of-type:after {
  content: "”";
  content: close-quote;
}
blockquote q:before {
  content: "‘";
  content: open-quote;
}
blockquote q:after {
  content: "’";
  content: close-quote;
}

/**
 *
   <blockquote>
       <p>Insanity: doing the same thing over and over again and expecting
       different results.</p>
       <b class=source>Albert Einstein</b>
   </blockquote>
 *
 */
blockquote {
  /**
   * .4em is roughly equal to the width of the opening “ that we wish to hang.
   */
  text-indent: -0.41em;
}
blockquote p:last-of-type {
  margin-bottom: 0;
}

.source {
  display: block;
  text-indent: 0;
}
.source:before {
  content: "—";
}

/*------------------------------------*\
    $CODE
\*------------------------------------*/
/**
 * Use an explicit font stack to ensure browsers render correct `line-height`.
 */
pre {
  overflow: auto;
}

pre mark {
  background: none;
  border-bottom: 1px solid;
  color: inherit;
}

/**
 * Add comments to your code examples, e.g.:
 *
   <code>&lt;/div&gt;<span class=code-comment>&lt;!-- /wrapper --&gt;</span></code>
 *
 */
.code-comment {
  /**
   * Override this setting in your theme stylesheet
   */
  opacity: 0.75;
  filter: alpha(opacity=75);
}

/**
 * You can add line numbers to your code examples but be warned, it requires
 * some pretty funky looking markup, e.g.:
 *
   <ol class=line-numbers>
       <li><code>.nav{</code></li>
       <li><code>    list-style:none;</code></li>
       <li><code>    margin-left:0;</code></li>
       <li><code>}</code></li>
       <li><code>    .nav > li,</code></li>
       <li><code>        .nav > li > a{</code></li>
       <li><code>            display:inline-block;</code></li>
       <li><code>           *display:inline-block;</code></li>
       <li><code>            zoom:1;</code></li>
       <li><code>        }</code></li>
   </ol>
 *
 * 1. Make the list look like code.
 * 2. Give the list flush numbers with a leading zero.
 * 3. Make sure lines of code don’t wrap.
 * 4. Give the code form by forcing the `code` to honour white-space.
 */
.line-numbers {
  font-family: monospace, serif;
  /* [1] */
  list-style: decimal-leading-zero inside;
  /* [2] */
  white-space: nowrap;
  /* [3] */
  overflow: auto;
  /* [3] */
  margin-left: 0;
}

.line-numbers code {
  white-space: pre;
  /* [4] */
}

/*------------------------------------*\
    $IMAGES
\*------------------------------------*/
/**
 * Demo: jsfiddle.net/inuitcss/yMtur
 */
/**
 * Fluid images.
 */
img {
  max-width: 100%;
}

/**
 * Non-fluid images if you specify `width` and/or `height` attributes.
 */
img[width],
img[height] {
  max-width: none;
}

/**
 * Rounded images.
 */
.img--round {
  border-radius: 4px;
}

/**
 * Image placement variations.
 */
.img--right {
  float: right;
  margin-bottom: 28px;
  margin-left: 28px;
}

.img--left {
  float: left;
  margin-right: 28px;
  margin-bottom: 28px;
}

.img--center {
  display: block;
  margin-right: auto;
  margin-bottom: 28px;
  margin-left: auto;
}

/**
 * Keep your images on your baseline.
 *
 * Please note, these will not work too nicely with fluid images and will
 * distort when resized below a certain width. Use with caution.
 */
.img--short {
  height: 140px;
}

.img--medium {
  height: 280px;
}

.img--tall {
  height: 420px;
}

/**
 * Images in `figure` elements.
 */
figure > img {
  display: block;
}

/*------------------------------------*\
    $LISTS
\*------------------------------------*/
/**
 * Remove vertical spacing from nested lists.
 */
li > ul,
li > ol {
  margin-bottom: 0;
}

/**
 * Have a numbered `ul` without the semantics implied by using an `ol`.
 */
/*ul*/
.numbered-list {
  list-style-type: decimal;
}

/*------------------------------------*\
    $TABLES
\*------------------------------------*/
/**
 * We have a lot at our disposal for making very complex table constructs, e.g.:
 *
   <table class="table--bordered  table--striped  table--data">
       <colgroup>
           <col class=t10>
           <col class=t10>
           <col class=t10>
           <col>
       </colgroup>
       <thead>
           <tr>
               <th colspan=3>Foo</th>
               <th>Bar</th>
           </tr>
           <tr>
               <th>Lorem</th>
               <th>Ipsum</th>
               <th class=numerical>Dolor</th>
               <th>Sit</th>
           </tr>
       </thead>
       <tbody>
           <tr>
               <th rowspan=3>Sit</th>
               <td>Dolor</td>
               <td class=numerical>03.788</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>32.210</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>47.797</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <th rowspan=2>Sit</th>
               <td>Dolor</td>
               <td class=numerical>09.640</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>12.117</td>
               <td>Lorem</td>
           </tr>
       </tbody>
   </table>
 *
 */
table {
  width: 100%;
}

th,
td {
  padding: 7px;
  text-align: left;
}
@media screen and (min-width: 480px) {
  th,
td {
    padding: 14px;
  }
}

/**
 * Cell alignments
 */
[colspan] {
  text-align: center;
}

[colspan="1"] {
  text-align: left;
}

[rowspan] {
  vertical-align: middle;
}

[rowspan="1"] {
  vertical-align: top;
}

.numerical {
  text-align: right;
}

/**
 * In the HTML above we see several `col` elements with classes whose numbers
 * represent a percentage width for that column. We leave one column free of a
 * class so that column can soak up the effects of any accidental breakage in
 * the table.
 */
.t5 {
  width: 5%;
}

.t10 {
  width: 10%;
}

.t12 {
  width: 12.5%;
}

/* 1/8 */
.t15 {
  width: 15%;
}

.t20 {
  width: 20%;
}

.t25 {
  width: 25%;
}

/* 1/4 */
.t30 {
  width: 30%;
}

.t33 {
  width: 33.333%;
}

/* 1/3 */
.t35 {
  width: 35%;
}

.t37 {
  width: 37.5%;
}

/* 3/8 */
.t40 {
  width: 40%;
}

.t45 {
  width: 45%;
}

.t50 {
  width: 50%;
}

/* 1/2 */
.t55 {
  width: 55%;
}

.t60 {
  width: 60%;
}

.t62 {
  width: 62.5%;
}

/* 5/8 */
.t65 {
  width: 65%;
}

.t66 {
  width: 66.666%;
}

/* 2/3 */
.t70 {
  width: 70%;
}

.t75 {
  width: 75%;
}

/* 3/4*/
.t80 {
  width: 80%;
}

.t85 {
  width: 85%;
}

.t87 {
  width: 87.5%;
}

/* 7/8 */
.t90 {
  width: 90%;
}

.t95 {
  width: 95%;
}

/**
 * Bordered tables
 */
.table--bordered th,
.table--bordered td {
  border: 1px solid #ccc;
}
.table--bordered th:empty,
.table--bordered td:empty {
  border: none;
}
.table--bordered thead tr:last-child th {
  border-bottom-width: 2px;
}
.table--bordered tbody tr th:last-of-type {
  border-right-width: 2px;
}

/**
 * Striped tables
 */
.table--striped tbody tr:nth-of-type(odd) {
  background-color: #ffc;
  /* Override this color in your theme stylesheet */
}

/**
 * Data table
 */
.table--data {
  font-size: 14px;
}

/*------------------------------------*\
    $FORMS
\*------------------------------------*/
/**
 *
 * Demo: jsfiddle.net/inuitcss/MhHHU
 *
 */
fieldset {
  padding: 28px;
}

/**
 * Text inputs
 *
 * Instead of a `[type]` selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
   <input type=text class=text-input>
   <input type=email class=text-input>
   <input type=password class=text-input>
 *
 */
.text-input, .select,
textarea {
  /**
   * Style these via your theme stylesheet.
   */
}

/**
 * Group sets of form fields in a list, e.g.:
 *
   <ul class=form-fields>
       <li>
           <label />
           <input />
       </li>
       <li>
           <label />
           <select />
       </li>
       <li>
           <label />
           <input />
       </li>
   </ul>
 *
 */
.form-fields {
  list-style: none;
  margin: 0;
}

.form-fields > li:last-child {
  margin-bottom: 0;
}

/**
 * Labels
 *
 * Define a `.label` class as well as a `label` element. This means we can apply
 * label-like styling to meta-labels for groups of options where a `label`
 * element is not suitable, e.g.:
 *
   <li>
       <span class=label>Select an option below:</span>
       <ul class="multi-list  four-cols">
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 *
 */
label,
.label {
  display: block;
}

/**
 * Extra help text in `label`s, e.g.:
 *
   <label>Card number <small class=additional>No spaces</small></label>
 *
 */
.additional {
  display: block;
  font-weight: normal;
}

/*
 * Groups of checkboxes and radios, e.g.:
 *
   <li>
       <ul class=check-list>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 *
 */
.check-list {
  list-style: none;
  margin: 0;
}

/*
 * Labels in check-lists
 */
.check-label,
.check-list label,
.check-list .label {
  display: inline-block;
}

/**
 * Spoken forms are for forms that read like spoken word, e.g.:
 *
   <li class=spoken-form>
       Hello, my <label for=spoken-name>name</label> is
       <input type=text class=text-input id=spoken-name>. My home
       <label for=country>country</label> is
       <select id=country>
           <option>UK</option>
           <option>US</option>
           <option>Other</option>
       </select>
   </li>
 *
 */
.spoken-form label {
  display: inline-block;
  font: inherit;
}

/**
 * Extra help text displayed after a field when that field is in focus, e.g.:
 *
   <label for=email>Email:</label>
   <input type=email class=text-input id=email>
   <small class=extra-help>.edu emails only</small>
 *
 * We leave the help text in the document flow and merely set it to
 * `visibility:hidden;`. This means that it won’t interfere with anything once
 * it reappears.
 *
 */
/*small*/
.extra-help {
  display: inline-block;
  visibility: hidden;
}

.text-input:active + .extra-help, .select:active + .extra-help,
.text-input:focus + .extra-help,
.select:focus + .extra-help {
  visibility: visible;
}

/**
 * Objects and abstractions
 */
/*------------------------------------*\
    $GRIDS
\*------------------------------------*/
/**
 * Fluid and nestable grid system, e.g.:
 *
   <div class="grid">

       <div class="grid__item  one-third">
           <p>One third grid</p>
       </div><!--

    --><div class="grid__item  two-thirds">
           <p>Two thirds grid</p>
       </div><!--

    --><div class="grid__item  one-half">
           <p>One half grid</p>
       </div><!--

    --><div class="grid__item  one-quarter">
           <p>One quarter grid</p>
       </div><!--

    --><div class="grid__item  one-quarter">
           <p>One quarter grid</p>
       </div>

   </div>
 *
 * Demo: jsfiddle.net/inuitcss/CLYUC
 *
 */
/**
 * Grid wrapper
 */
.grid {
  margin-left: -28px;
  list-style: none;
  margin-bottom: 0;
}

/**
 * Very infrequently occuring grid wrappers as children of grid wrappers.
 */
.grid > .grid {
  margin-left: 0;
}

/**
 * Grid
 */
.grid__item {
  display: inline-block;
  width: 100%;
  padding-left: 28px;
  vertical-align: top;
}

/*------------------------------------*\
    $FLEXBOX
\*------------------------------------*/
/**
 * Until we can utilise flexbox natively we can kinda, sorta, attempt to emulate
 * it, in a way... e.g.:
 *
   <header class=flexbox>

       <div class=flexbox__item>
           <b>Welcome to</b>
       </div>

       <div class=flexbox__item>
           <img src="//csswizardry.com/inuitcss/img/logo.jpg" alt="inuit.css">
       </div>

   </header>
 *
 * We can also combine our grid system classes with `.flexbox__item` classes,
 * e.g.:
 *
   <div class=flexbox>
       <div class="flexbox__item  one-quarter">
       </div>
       <div class="flexbox__item  three-quarters">
       </div>
   </div>
 *
 * It’s pretty poorly named I’m afraid, but it works...
 *
 * Demo: jsfiddle.net/inuitcss/ufUh2
 *
 */
.flexbox {
  display: table;
  width: 100%;
}

/**
 * Nasty hack to circumvent Modernizr conflicts.
 */
html.flexbox {
  display: block;
  width: auto;
}

.flexbox__item {
  display: table-cell;
  vertical-align: middle;
}

/*------------------------------------*\
    $COLUMNS
\*------------------------------------*/
/**
 * Here we can set elements in columns of text using CSS3, e.g.:
 *
   <p class=text-cols--2>
 *
 * Demo: jsfiddle.net/inuitcss/E26Yd
 *
 */
.text-cols--5, .text-cols--4, .text-cols--3, .text-cols--2 {
  -ms-column-gap: 28px;
  -o-column-gap: 28px;
  column-gap: 28px;
}

.text-cols--2 {
  -ms-column-count: 2;
  -o-column-count: 2;
  column-count: 2;
}

.text-cols--3 {
  -ms-column-count: 3;
  -o-column-count: 3;
  column-count: 3;
}

.text-cols--4 {
  -ms-column-count: 4;
  -o-column-count: 4;
  column-count: 4;
}

.text-cols--5 {
  -ms-column-count: 5;
  -o-column-count: 5;
  column-count: 5;
}

/*------------------------------------*\
    $NAV
\*------------------------------------*/
/**
 * Nav abstraction as per: csswizardry.com/2011/09/the-nav-abstraction
 * When used on an `ol` or `ul`, this class throws the list into horizontal mode
 * e.g.:
 *
   <ul class=nav>
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 * Demo: jsfiddle.net/inuitcss/Vnph4
 *
 */
.nav, .icon-list, .site__header__nav .social-links ul, .site__header__nav .main-nav ul, .twitter__tools, .validation-list, .pagination, .sub-nav ul, .sub-nav {
  list-style: none;
  margin-left: 0;
}
.nav > li, .icon-list > li, .site__header__nav .social-links ul > li, .site__header__nav .main-nav ul > li, .twitter__tools > li, .validation-list > li, .pagination > li, .sub-nav ul > li, .sub-nav > li,
.nav > li > a,
.icon-list > li > a,
.site__header__nav .social-links ul > li > a,
.site__header__nav .main-nav ul > li > a,
.twitter__tools > li > a,
.validation-list > li > a,
.pagination > li > a,
.sub-nav ul > li > a,
.sub-nav > li > a {
  display: inline-block;
  *display: inline;
  zoom: 1;
}

/**
 * `.nav--stacked` extends `.nav` and throws the list into vertical mode, e.g.:
 *
   <ul class="nav  nav--stacked">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--stacked > li, .site__header__nav .main-nav ul > li, .validation-list > li, .sub-nav ul > li, .sub-nav > li {
  display: list-item;
}
.nav--stacked > li > a, .site__header__nav .main-nav ul > li > a, .validation-list > li > a, .sub-nav ul > li > a, .sub-nav > li > a {
  display: block;
}

/**
 * `.nav--banner` extends `.nav` and centres the list, e.g.:
 *
   <ul class="nav  nav--banner">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--banner {
  text-align: center;
}

/**
 * Give nav links a big, blocky hit area. Extends `.nav`, e.g.:
 *
   <ul class="nav  nav--block">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--block, .options {
  line-height: 1;
  /**
   * Remove whitespace caused by `inline-block`.
   */
  letter-spacing: -0.31em;
  word-spacing: -0.43em;
  white-space: nowrap;
}
.nav--block > li, .options > li {
  letter-spacing: normal;
  word-spacing: normal;
}
.nav--block > li > a, .options > li > a {
  padding: 14px;
}

/**
 * Force a nav to occupy 100% of the available width of its parent. Extends
 * `.nav`, e.g.:
 *
   <ul class="nav  nav--fit">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 * Thanks to @pimpl for this idea!
 */
.nav--fit {
  display: table;
  width: 100%;
}
.nav--fit > li {
  display: table-cell;
}
.nav--fit > li > a {
  display: block;
}

/**
 * Make a list of keywords. Extends `.nav`, e.g.:
 *
   `<ul class="nav  nav--keywords>`
 *
 */
.nav--keywords > li:after {
  content: "," " ";
}
.nav--keywords > li:last-child:after {
  display: none;
}

/*------------------------------------*\
    $OPTIONS
\*------------------------------------*/
/**
 * Link-group nav, used for displaying related options. Extends `.nav--block`
 * but could also extend `.nav--fit`. Extend with colours and ‘current states’
 * in your theme stylesheet.
 *
  <ul class="nav  options">
      <li><a></a></li>
      <li><a></a></li>
      <li><a></a></li>
      <li><a></a></li>
   </ul>
 *
 * Demo: jsfiddle.net/inuitcss/vwfaf
 *
 */
.options > li > a {
  border: 0 solid #ccc;
  border-width: 1px;
  border-left-width: 0;
}
.options > li:first-child > a {
  border-left-width: 1px;
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.options > li:last-child > a {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}

/*------------------------------------*\
    $PAGINATION
\*------------------------------------*/
/**
 * Basic pagination object, extends `.nav`.
 * Requires some funky commenting to collapse any white-space caused by the
 * `display:inline-block;` rules.
 *
   <ol class="nav  pagination">
       <li class=pagination__first>First</li>
       <li class=pagination__prev>Previous</li>
       <li><a href=/page/1>1</a></li>
       <li><a href=/page/2>2</a></li>
       <li class=current><a href=/page/3>3</a></li>
       <li><a href=/page/4>4</a></li>
       <li><a href=/page/5>5</a></li>
       <li class=pagination__next><a href=/page/next>Next</a></li>
       <li class=pagination__last><a href=/page/last>Last</a></li>
   </ol>
 *
 * Demo: jsfiddle.net/inuitcss/9Y6PU
 *
 */
.pagination {
  text-align: center;
  /**
   * Remove whitespace caused by `inline-block`.
   */
  letter-spacing: -0.31em;
  word-spacing: -0.43em;
}

.pagination > li {
  padding: 14px;
  letter-spacing: normal;
  word-spacing: normal;
}

.pagination > li > a {
  padding: 14px;
  margin: -14px;
}

.pagination__first a:before {
  content: "«" " ";
}

.pagination__last a:after {
  content: " " "»";
}

/*------------------------------------*\
    $BREADCRUMB
\*------------------------------------*/
/**
 * Simple breadcrumb styling to apply to (ordered) lists. Extends `.nav`, e.g.:
 *
   <ol class="nav  breadcrumb">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>The Board</a></li>
       <li class=current><a href=#>Directors</a></li>
   </ol>
 *
 * Demo: jsfiddle.net/inuitcss/rkAY9
 *
 */
.breadcrumb > li + li:before {
  content: "»" " ";
}

/**
 * For denoting a path-like structure, GitHub style, e.g.:
 *
   <ol class="nav  breadcrumb--path">
       <li class=breadcrumb__root><a href=#>inuit.css</a></li>
       <li><a href=#>inuit.css</a></li>
       <li><a href=#>partials</a></li>
       <li class=current><a href=#>objects</a></li>
   </ol>
 *
 */
.breadcrumb--path > li + li:before {
  content: "/" " ";
}

/**
 * Assign a delimiter on the fly through a data attribute, e.g.:
 *
   <ol class="nav  breadcrumb">
       <li><a href=#>Home</a></li>
       <li data-breadcrumb="|"><a href=#>About</a></li>
       <li data-breadcrumb="|"><a href=#>The Board</a></li>
       <li data-breadcrumb="|" class=current><a href=#>Directors</a></li>
   </ol>
 *
 */
.breadcrumb > li + li[data-breadcrumb]:before {
  content: attr(data-breadcrumb) " ";
}

/**
 * Denote the root of the tree.
 */
.breadcrumb__root {
  font-weight: bold;
}

/*------------------------------------*\
    $MEDIA
\*------------------------------------*/
/**
 * Place any image- and text-like content side-by-side, as per:
 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 * E.g.:
 *
   <div class=media>
       <img src=http://placekitten.com/200/300 alt="" class=media__img>
       <p class=media__body>Lorem ipsum dolor sit amet, consectetur adipisicing elit,
       sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/cf4Qs
 *
 */
.media {
  display: block;
}

.media__img {
  float: left;
  margin-right: 28px;
}

/**
 * Reversed image location (right instead of left).
 */
.media__img--rev {
  float: right;
  margin-left: 28px;
}

.media__img img,
.media__img--rev img {
  display: block;
}

.media__body {
  overflow: hidden;
}

.media__body,
.media__body > :last-child {
  margin-bottom: 0;
}

/**
 * `.img`s in `.islet`s need an appropriately sized margin.
 */
.islet .media__img, .twitter .media__img {
  margin-right: 14px;
}

.islet .media__img--rev, .twitter .media__img--rev {
  margin-left: 14px;
}

/*------------------------------------*\
    $MARGINALIA
\*------------------------------------*/
/**
 * Marginalia are, per definition, notes in the margin of a document. The
 * `marginalia__body` class can be applied to all kinds of content, like text or
 * images, and is joined by a width class:
 *
   <div class="marginalia">
       <div class="marginalia__body  desk-one-fifth"></div>
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/AemkH
 *
 */
.marginalia {
  font-size: 13px;
  font-size: 0.7222222222rem;
  line-height: 2.1538461538;
}

/**
 * Wait for a certain breakpoint to trigger ‘proper' marginalia. Up to this point,
 * marginalia are inline with the other text.
 */
@media (min-width: 1024px) {
  .marginalia {
    position: relative;
  }

  .marginalia__body,
.marginalia__body--right {
    position: absolute;
  }

  .marginalia__body {
    right: 100%;
    padding-right: 28px;
    text-align: right;
  }

  /**
   * Align marginalia to the right of the text.
   */
  .marginalia__body--right {
    left: 100%;
    padding-left: 28px;
    text-align: left;
  }
}
/*------------------------------------*\
    $ISLAND
\*------------------------------------*/
/**
 * Simple, boxed off content, as per: csswizardry.com/2011/10/the-island-object
 * E.g.:
 *
   <div class=island>
       I am boxed off.
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/u8pV3
 *
 */
.island, .banner,
.islet,
.twitter {
  display: block;
}

.island, .banner {
  padding: 28px;
}

.island > :last-child, .banner > :last-child,
.islet > :last-child,
.twitter > :last-child {
  margin-bottom: 0;
}

/**
 * Just like `.island`, only smaller.
 */
.islet, .twitter {
  padding: 14px;
}

/*------------------------------------*\
    $BLOCK-LIST
\*------------------------------------*/
/**
 * Create big blocky lists of content, e.g.:
 *
   <ul class=block-list>
      <li>Foo</li>
      <li>Bar</li>
      <li>Baz</li>
      <li><a href=# class=block-list__link>Foo Bar Baz</a></li>
   </ul>
 *
 * Extend this object in your theme stylesheet.
 *
 * Demo: jsfiddle.net/inuitcss/hR57q
 *
 */
.block-list, .matrix,
.block-list > li,
.matrix > li {
  border: 0 solid #ccc;
}

.block-list, .matrix {
  list-style: none;
  margin-left: 0;
  border-top-width: 1px;
}
.block-list > li, .matrix > li {
  border-bottom-width: 1px;
  padding: 14px;
}

.block-list__link, .matrix__link {
  display: block;
  padding: 14px;
  margin: -14px;
}

/*------------------------------------*\
    $MATRIX
\*------------------------------------*/
/**
 * Create a grid of items out of a single list, e.g.:
 *
   <ul class="matrix  three-cols">
       <li class=all-cols>Lorem</li>
       <li>Ipsum <a href=#>dolor</a></li>
       <li><a href=# class=matrix__link>Sit</a></li>
       <li>Amet</li>
       <li class=all-cols>Consectetuer</li>
   </ul>
 *
 * Extend this object in your theme stylesheet.
 *
 * Demo: jsfiddle.net/inuitcss/Y2zrU
 *
 */
.matrix {
  border-left-width: 1px;
}
.matrix > li {
  float: left;
  border-right-width: 1px;
}

/**
 * The `.multi-list` object is a lot like the `.matrix` object only without the
 * blocky borders and padding.
 *
   <ul class="multi-list  four-cols">
       <li>Lorem</li>
       <li>Ipsum</li>
       <li>Dolor</li>
       <li>Sit</li>
   </ul>
 *
 * Demo: jsfiddle.net/inuitcss/Y2zrU
 *
 */
.multi-list, .boxed-nav {
  list-style: none;
  margin-left: 0;
}

.multi-list > li, .boxed-nav > li {
  float: left;
}

/**
 * Apply these classes alongside the `.matrix` or `.multi-list` classes on
 * lists to determine how wide their columns are.
 */
.two-cols > li {
  width: 50%;
}

.three-cols > li {
  width: 33.333%;
}

.four-cols > li {
  width: 25%;
}

.five-cols > li {
  width: 20%;
}

/**
 * Unfortunately we have to qualify this selector in order to bring its
 * specificity above the `.[number]-cols > li` selectors above.
 */
.matrix > .all-cols,
.multi-list > .all-cols,
.boxed-nav > .all-cols {
  width: 100%;
}

/*------------------------------------*\
    $SPLIT
\*------------------------------------*/
/**
 * Simple split item for creating two elements floated away from one another,
 * e.g.:
 *
   <dl class=split>
       <dt class=split__title>Burger and fries</dt>
       <dd>&pound;5.99</dd>
       <dt class=split__title>Fillet steak</dt>
       <dd>&pound;19.99</dd>
       <dt class=split__title>Ice cream</dt>
       <dd>&pound;2.99</dd>
   </dl>
 *
   <ol class="split  results">
       <li class=first><b class=split__title>1st place</b> Bob</li>
       <li class=second><b class=split__title>2nd place</b> Lilly</li>
       <li class=third><b class=split__title>3rd place</b> Ted</li>
   </ol>​
 *
 * Demo: jsfiddle.net/inuitcss/9gZW7
 *
 */
.split {
  text-align: right;
  list-style: none;
  margin-left: 0;
}

.split__title {
  text-align: left;
  float: left;
  clear: left;
}

/*------------------------------------*\
    $THIS-OR-THIS
\*------------------------------------*/
/**
 * Simple options object to provide multiple choices, e.g.:
 *
   <h1 class=this-or-this>
       <a href=# class="this-or-this__this  two-fifths">
           Free
       </a>
       <span class="this-or-this__or  one-fifth">
           or
       </span>
       <a href=# class="this-or-this__this  two-fifths">
           Pro
       </a>
   </h1>
 *
 * The `.this-or-this__this` and `.this-or-this__or` objects can be sized using
 * the grid-system classes.
 *
 * Demo: jsfiddle.net/inuitcss/R3sks
 *
 */
.this-or-this {
  display: table;
  width: 100%;
  text-align: center;
}

.this-or-this__this,
.this-or-this__or {
  display: table-cell;
  vertical-align: middle;
}

/*------------------------------------*\
    $LINK-COMPLEX
\*------------------------------------*/
/**
 * As inspired by @necolas:
 * github.com/necolas/suit-utils/blob/master/link.css#L18
 *
 * Add hover behaviour to only selected items within links, e.g.:
 *
   <a href=log-in class=link-complex>
       <i class="s  s--user"></i>
       <span class=link-complex__target>Log in</span>
   </a>
 *
 * Demo: jsfiddle.net/inuitcss/rt9M3
 *
 */
.link-complex,
.link-complex:hover,
.link-complex:active,
.link-complex:focus {
  text-decoration: none;
}

.link-complex:hover .link-complex__target,
.link-complex:active .link-complex__target,
.link-complex:focus .link-complex__target {
  text-decoration: underline;
}

/*------------------------------------*\
    $FLYOUT
\*------------------------------------*/
/**
 * Flyouts are pieces of content that fly out of a parent when said parent is
 * hovered. They typically appear bottom-left of the parent.
 *
   <div class=flyout>
       Foo
       <div class=flyout__content>
           <h1>Lorem</h1>
           <p>Ipsum</p>
       </div>
   </div>
 *
 * Extend these objects in your theme stylesheet.
 *
 * Demo: jsfiddle.net/inuitcss/B52HG
 *
 */
.flyout,
.flyout--alt {
  position: relative;
  overflow: hidden;
}

.flyout__content {
  /**
   * Position the flyouts off-screen. This is typically better than
   * `display:none;`.
   */
  position: absolute;
  top: 100%;
  left: -99999px;
}

/**
 * Bring the flyouts into view when you hover their parents.
 * Two different types of flyout; ‘regular’ (`.flyout`) and ‘alternative’
 * (`.flyout--alt`).
 */
.flyout:hover,
.flyout--alt:hover {
  overflow: visible;
}

/**
 * Regular flyouts sit all the way from the top, flush left.
 */
.flyout:hover > .flyout__content {
  left: 0;
}

/**
 * Alternative flyouts sit all the way from the left, flush top.
 */
.flyout--alt:hover > .flyout__content {
  top: 0;
  left: 100%;
}

/*------------------------------------*\
    $ARROWS
\*------------------------------------*/
/**
 * It is a common design treatment to give an element a triangular points-out
 * arrow, we typically build these with CSS. These following classes allow us to
 * generate these arbitrarily with a mixin, `@arrow()`.
 */
/**
 * Forms the basis for any/all CSS arrows.
 */
/**
 * Define individual edges so we can combine what we need, when we need.
 */
/*------------------------------------*\
    $SPRITE
\*------------------------------------*/
/**
 * Giving an element a class of `.sprite` will throw it into ‘sprite’ mode and apply
 * a background image e.g.:
 *
   <a class="sprite  sprite--question-mark">More info&hellip;</a>
 *
 * or
 *
   <a href=#><i class="sprite  sprite--question-mark"></i> Help and FAQ</a>
 *
 * Giving an element a class of `.icon` will throw it into ‘icon’ mode and will
 * not add a background, but should be used for icon fonts and is populated
 * through a `data-icon` attribute and the `:after` pseudo-element, e.g.:
 *
   <a href=#><i class=icon data-icon="&#xF000;"></i> View your favourites</a>
 *
 * Where ‘&#xF000;’ might map to a star in your particular icon font.
 *
 * These all require extension in your theme stylesheet, e.g. in your own CSS:
 *
   .sprite{
       background-image:url(path/to/your/sprite.png);
   }
   .sprite--link{ background-position:0   0  ; }
   .sprite--star{ background-position:0 -16px; }
 *
 * Demo: jsfiddle.net/inuitcss/6TKuS
 *
 */
.sprite,
.icon,
.breadcrumb > li + li:before {
  display: inline-block;
  line-height: 1;
  position: relative;
  vertical-align: middle;
  zoom: 1;
  /**
   * So using `.icon` on certain elements doesn’t make a visual difference.
   */
  font-style: normal;
  font-weight: normal;
  /**
   * So icons added using `.icon` sit in the centre of the element.
   */
  text-align: center;
}

.sprite {
  /**
   * The typical size of most icons. Override in your theme stylesheet.
   */
  width: 16px;
  height: 16px;
  top: -1px;
  /*
   * H5BP method image replacement:
   * github.com/h5bp/html5-boilerplate/commit/adecc5da035d6d76b77e3fa95c6abde841073da2
   */
  overflow: hidden;
  *text-indent: -9999px;
}
.sprite:before {
  content: "";
  display: block;
  width: 0;
  height: 100%;
}

/**
 * Set up icon font
 */
.icon, .breadcrumb > li + li:before {
  font-size: 16px;
  /**
   * Place the icon in a box the exact same dimensions as the icon itself.
   */
  width: 1em;
  height: 1em;
}
.icon:before, .breadcrumb > li + li:before {
  content: attr(data-icon);
}

/**
 * Icon size modifiers.
 */
.icon--large {
  font-size: 32px;
}

.icon--huge {
  font-size: 64px;
}

.icon--natural {
  font-size: inherit;
}

/*------------------------------------*\
    $ICON-TEXT
\*------------------------------------*/
/**
 * For text-links etc that have an icon with them. Sometimes whitespace would
 * suffice in creating a gap between the icon and text, for example:
 *
   <a href=#>
       <i class="s  s--help"></i> Help &amp; support
   </a>
 *
 * However we will sometimes want a larger, explicity set gap:
   <a href=# class=icon-text>
       <i class="icon-text__icon  s  s--help"></i>Help &amp; support
   </a>
 *
 * Demo: jsfiddle.net/inuitcss/Q6Lbf
 *
 */
.icon-text > .icon-text__icon {
  margin-right: 7px;
}

/**
 * We can also reverse the direction of the margin for icons that appear to the
 * right of the text content, thus:
 *
   <a href=# class=icon-text--rev>
       Help &amp; support<i class="icon-text__icon  s  s--help"></i>
   </a>
 *
 */
.icon-text--rev > .icon-text__icon {
  margin-left: 7px;
}

/*------------------------------------*\
    $BEAUTONS.CSS
\*------------------------------------*/
/**
 * beautons is a beautifully simple button toolkit.
 *
 * LICENSE
 * 
 * Copyright 2013 Harry Roberts
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
/*!*
 * 
 * @csswizardry -- csswizardry.com/beautons
 * 
 */
/*------------------------------------*\
    $BASE
\*------------------------------------*/
/**
 * Base button styles.
 *
 * 1. Allow us to better style box model properties.
 * 2. Line different sized buttons up a little nicer.
 * 3. Stop buttons wrapping and looking broken.
 * 4. Make buttons inherit font styles.
 * 5. Force all elements using beautons to appear clickable.
 * 6. Normalise box model styles.
 * 7. If the button’s text is 1em, and the button is (3 * font-size) tall, then
 *    there is 1em of space above and below that text. We therefore apply 1em
 *    of space to the left and right, as padding, to keep consistent spacing.
 * 8. Basic cosmetics for default buttons. Change or override at will.
 * 9. Don’t allow buttons to have underlines; it kinda ruins the illusion.
 */
.btn {
  display: inline-block;
  /* [1] */
  vertical-align: middle;
  /* [2] */
  white-space: nowrap;
  /* [3] */
  font-family: inherit;
  /* [4] */
  font-size: 100%;
  /* [4] */
  cursor: pointer;
  /* [5] */
  border: none;
  /* [6] */
  margin: 0;
  /* [6] */
  padding-top: 0;
  /* [6] */
  padding-bottom: 0;
  /* [6] */
  line-height: 3;
  /* [7] */
  padding-right: 1em;
  /* [7] */
  padding-left: 1em;
  /* [7] */
  border-radius: 4px;
  /* [8] */
}

.btn, .btn:hover {
  text-decoration: none;
  /* [9] */
}
.btn:active, .btn:focus {
  outline: none;
}

/*------------------------------------*\
    $SIZES
\*------------------------------------*/
/**
 * Button size modifiers.
 *
 * These all follow the same sizing rules as above; text is 1em, space around it
 * remains uniform.
 */
.btn--small, .spoken-form .btn {
  padding-right: 0.5em;
  padding-left: 0.5em;
  line-height: 2;
}

.btn--large {
  padding-right: 1.5em;
  padding-left: 1.5em;
  line-height: 4;
}

.btn--huge {
  padding-right: 2em;
  padding-left: 2em;
  line-height: 5;
}

/**
 * These buttons will fill the entirety of their container.
 *
 * 1. Remove padding so that widths and paddings don’t conflict.
 */
.btn--full {
  width: 100%;
  padding-right: 0;
  /* [1] */
  padding-left: 0;
  /* [1] */
  text-align: center;
}

/*------------------------------------*\
    $FONT-SIZES
\*------------------------------------*/
/**
 * Button font-size modifiers.
 */
.btn--alpha {
  font-size: 3rem;
}

.btn--beta {
  font-size: 2rem;
}

.btn--gamma {
  font-size: 1rem;
}

/**
 * Make the button inherit sizing from its parent.
 */
.btn--natural {
  vertical-align: baseline;
  font-size: inherit;
  line-height: inherit;
  padding-right: 0.5em;
  padding-left: 0.5em;
}

/*------------------------------------*\
    $FUNCTIONS
\*------------------------------------*/
/**
 * Button function modifiers.
 */
/**
 * Positive actions; e.g. sign in, purchase, submit, etc.
 */
.btn--positive {
  background-color: #4A993E;
  color: #fff;
}

/**
 * Negative actions; e.g. close account, delete photo, remove friend, etc.
 */
.btn--negative {
  background-color: #b33630;
  color: #fff;
}

/**
 * Inactive, disabled buttons.
 * 
 * 1. Make the button look like normal text when hovered.
 */
.btn--inactive,
.btn--inactive:hover,
.btn--inactive:active,
.btn--inactive:focus {
  background-color: #ddd;
  color: #777;
  cursor: text;
  /* [1] */
}

/*------------------------------------*\
    $STYLES
\*------------------------------------*/
/**
 * Button style modifiers.
 *
 * 1. Use an overly-large number to ensure completely rounded, pill-like ends.
 */
.btn--soft {
  border-radius: 200px;
  /* [1] */
}

.btn--hard {
  border-radius: 0;
}

/*------------------------------------*\
    $LOZENGES
\*------------------------------------*/
/**
 * Create pill- and lozenge-like runs of text, e.g.:
 *
   <p>This <span class=pill>here</span> is a pill!</p>
 *
   <p>This <span class=loz>here</span> is also a lozenge!</p>
 *
 * Pills have fully rounded ends, lozenges have only their corners rounded.
 *
 * Demo: jsfiddle.net/inuitcss/N3pGm
 *
 */
.pill, .loz {
  display: inline-block;
  /**
   * These numbers set in ems mean that, at its narrowest, a lozenge will be
   * the same width as the `line-height` set on the `html` element.
   * This allows us to use the `.loz` in almost any `font-size` we wish.
   */
  min-width: 1.0370375556em;
  padding-right: 0.2592597778em;
  padding-left: 0.2592597778em;
  /* =1.50em */
  text-align: center;
  background-color: #ccc;
  color: #fff;
  /* Override this color in your theme stylesheet */
  /**
   * Normally we’d use border-radius:100%; but instead here we just use an
   * overly large number; `border-radius:100%;` would create an oval on
   * non-square elements whereas we just want to round the ends of an element.
   */
  border-radius: 100px;
}

.loz {
  border-radius: 4px;
}

/*------------------------------------*\
    $RULES
\*------------------------------------*/
/**
 * Horizontal rules, extend `hr`.
 *
 * Demo: jsfiddle.net/inuitcss/L6GuZ
 *
 */
.rule {
  color: #ccc;
  border: none;
  border-bottom-width: 1px;
  border-bottom-style: solid;
  margin-bottom: 27px;
  margin-bottom: 1.5rem;
}

/**
 * Dotted rules
 */
.rule--dotted {
  border-bottom-style: dotted;
}

/**
 * Dashed rules
 */
.rule--dashed {
  border-bottom-style: dashed;
}

/**
 * Ornamental rules. Places a § over the rule.
 */
.rule--ornament {
  position: relative;
  /**
  * Pass in an arbitrary ornament though a data attribute, e.g.:
  *
    <hr class="rule  rule--ornament" data-ornament="!">
  *
  */
}
.rule--ornament:after {
  content: "§";
  position: absolute;
  top: 0;
  right: 0;
  left: 0;
  line-height: 0;
  text-align: center;
}
.rule--ornament[data-ornament]:after {
  content: attr(data-ornament);
}

/*------------------------------------*\
    $STATS
\*------------------------------------*/
/**
 * Simple object to display key–value statistic-like information, e.g.:
 *
   <div class=stat-group>
       <dl class=stat>
           <dt class=stat__title>Tweets</dt>
           <dd class=stat__value>27,740</dd>
       </dl>

       <dl class=stat>
           <dt class=stat__title>Following</dt>
           <dd class=stat__value>11,529</dd>
       </dl>

       <dl class=stat>
           <dt class=stat__title>Followers</dt>
           <dd class=stat__value>12,105</dd>
       </dl>
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/Bpwu6
 *
 */
.stat-group {
  margin-left: -28px;
}

.stat {
  float: left;
  margin-left: 28px;
  display: -moz-flex;
  display: flex;
  -moz-flex-direction: column;
  -o-flex-direction: column;
  flex-direction: column;
}

.stat__title {
  -moz-order: 2;
  -ms-order: 2;
  -o-order: 2;
  order: 2;
  -ms-flex-order: 2;
}

.stat__value {
  margin-left: 0;
  -moz-order: 1;
  -ms-order: 1;
  -o-order: 1;
  order: 1;
  -ms-flex-order: 1;
}

/*------------------------------------*\
    $GREYBOX
\*------------------------------------*/
/**
 * Quickly throw together greybox wireframes. Use in conjunction with other
 * inuit.css objects to create simple greybox prototypes, e.g.:
 *
   <div class="island  greybox  greybox--medium">Header</div>

   <ul class="nav  nav--fit  nav--block  greybox">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 * The beauty of combining the greyboxing with inuit.css objects is that any
 * prototyping can quickly be converted into/used as production code.
 *
 * For a more complete prototyping framework, consider Adam Whitcroft’s Proto:
 * adamwhitcroft.com/proto
 *
 * Demo: jsfiddle.net/inuitcss/qCXfh/
 *
 */
.greybox,
.graybox {
  font-size: 12px;
  font-size: 0.6666666667rem;
  line-height: 2.3333333333;
  font-family: sans-serif;
  text-align: center;
  background-color: rgba(0, 0, 0, 0.2);
  color: #fff;
}

.greybox a,
.graybox a {
  color: #fff;
  text-decoration: underline;
}

/**
 * All greyboxes will occupy 100% of their parent’s width, but to alter their
 * heights we apply incrementally larger line-heights:
 */
.greybox--small,
.graybox--small {
  line-height: 56px;
}

.greybox--medium,
.graybox--medium {
  line-height: 112px;
}

.greybox--large,
.graybox--large {
  line-height: 224px;
}

.greybox--huge,
.graybox--huge {
  line-height: 448px;
}

.greybox--gigantic,
.graybox--gigantic {
  line-height: 896px;
}

/**
 * Style trumps; helper and brand classes
 */
/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Sizes in human readable format. These are used in conjunction with other
 * objects and abstractions found in inuit.css, most commonly the grid system
 * and faux flexbox.
 *
 * We have a mixin to generate our widths and their breakpoint-specific
 * variations.
 */
/**
* Whole
*/
.one-whole {
  width: 100%;
}

/**
* Halves
*/
.one-half, .data--compact .data__value, .data--compact .data__name, .six-twelfths, .five-tenths, .four-eighths, .three-sixths, .two-quarters {
  width: 50%;
}

/**
* Thirds
*/
.one-third, .data .data__name, .four-twelfths, .two-sixths {
  width: 33.333%;
}

.two-thirds, .data .data__value, .matrix > .last-two-cols,
.multi-list > .last-two-cols,
.boxed-nav > .last-two-cols, .eight-twelfths, .four-sixths {
  width: 66.666%;
}

/**
* Quarters
*/
.one-quarter, .three-twelfths, .two-eighths {
  width: 25%;
}

.three-quarters, .matrix > .last-three-cols,
.multi-list > .last-three-cols,
.boxed-nav > .last-three-cols, .nine-twelfths, .six-eighths {
  width: 75%;
}

/**
* Fifths
*/
.one-fifth, .two-tenths {
  width: 20%;
}

.two-fifths, .four-tenths {
  width: 40%;
}

.three-fifths, .six-tenths {
  width: 60%;
}

.four-fifths, .eight-tenths {
  width: 80%;
}

/**
* Sixths
*/
.one-sixth, .two-twelfths {
  width: 16.666%;
}

.five-sixths, .ten-twelfths {
  width: 83.333%;
}

/**
* Eighths
*/
.one-eighth {
  width: 12.5%;
}

.three-eighths {
  width: 37.5%;
}

.five-eighths {
  width: 62.5%;
}

.seven-eighths {
  width: 87.5%;
}

/**
* Tenths
*/
.one-tenth {
  width: 10%;
}

.three-tenths {
  width: 30%;
}

.seven-tenths {
  width: 70%;
}

.nine-tenths {
  width: 90%;
}

/**
* Twelfths
*/
.one-twelfth {
  width: 8.333%;
}

.five-twelfths {
  width: 41.666%;
}

.seven-twelfths {
  width: 58.333%;
}

.eleven-twelfths {
  width: 91.666%;
}

/**
 * If you have set `$responsive` to ‘true’ in `_vars.scss` then you now have
 * access to these classes. You can define at which breakpoint you’d like an
 * element to be a certain size, e.g.:
 *
 * `<div class="g  one-quarter  lap-one-half  palm-one-whole"> ... </div>`
 *
 * This would create a `div` that, at ‘desktop’ sizes, takes up a quarter of the
 * horizontal space, a half of that space at ‘tablet’ sizes, and goes full width
 * at ‘mobile’ sizes.
 *
 * Demo: jsfiddle.net/inuitcss/WS4Ge
 *
 */
@media only screen and (max-width: 569px) {
  /**
  * Whole
  */
  .palm-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  .palm-one-half, .palm-six-twelfths, .palm-five-tenths, .palm-four-eighths, .palm-three-sixths, .palm-two-quarters {
    width: 50%;
  }

  /**
  * Thirds
  */
  .palm-one-third, .palm-four-twelfths, .palm-two-sixths {
    width: 33.333%;
  }

  .palm-two-thirds, .palm-eight-twelfths, .palm-four-sixths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  .palm-one-quarter, .palm-three-twelfths, .palm-two-eighths {
    width: 25%;
  }

  .palm-three-quarters, .palm-nine-twelfths, .palm-six-eighths {
    width: 75%;
  }

  /**
  * Fifths
  */
  .palm-one-fifth, .palm-two-tenths {
    width: 20%;
  }

  .palm-two-fifths, .palm-four-tenths {
    width: 40%;
  }

  .palm-three-fifths, .palm-six-tenths {
    width: 60%;
  }

  .palm-four-fifths, .palm-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  .palm-one-sixth, .palm-two-twelfths {
    width: 16.666%;
  }

  .palm-five-sixths, .palm-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  .palm-one-eighth {
    width: 12.5%;
  }

  .palm-three-eighths {
    width: 37.5%;
  }

  .palm-five-eighths {
    width: 62.5%;
  }

  .palm-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  .palm-one-tenth {
    width: 10%;
  }

  .palm-three-tenths {
    width: 30%;
  }

  .palm-seven-tenths {
    width: 70%;
  }

  .palm-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  .palm-one-twelfth {
    width: 8.333%;
  }

  .palm-five-twelfths {
    width: 41.666%;
  }

  .palm-seven-twelfths {
    width: 58.333%;
  }

  .palm-eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (min-width: 570px) and (max-width: 1023px) {
  /**
  * Whole
  */
  .lap-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  .lap-one-half, .lap-six-twelfths, .lap-five-tenths, .lap-four-eighths, .lap-three-sixths, .lap-two-quarters {
    width: 50%;
  }

  /**
  * Thirds
  */
  .lap-one-third, .lap-four-twelfths, .lap-two-sixths {
    width: 33.333%;
  }

  .lap-two-thirds, .lap-eight-twelfths, .lap-four-sixths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  .lap-one-quarter, .lap-three-twelfths, .lap-two-eighths {
    width: 25%;
  }

  .lap-three-quarters, .lap-nine-twelfths, .lap-six-eighths {
    width: 75%;
  }

  /**
  * Fifths
  */
  .lap-one-fifth, .lap-two-tenths {
    width: 20%;
  }

  .lap-two-fifths, .lap-four-tenths {
    width: 40%;
  }

  .lap-three-fifths, .lap-six-tenths {
    width: 60%;
  }

  .lap-four-fifths, .lap-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  .lap-one-sixth, .lap-two-twelfths {
    width: 16.666%;
  }

  .lap-five-sixths, .lap-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  .lap-one-eighth {
    width: 12.5%;
  }

  .lap-three-eighths {
    width: 37.5%;
  }

  .lap-five-eighths {
    width: 62.5%;
  }

  .lap-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  .lap-one-tenth {
    width: 10%;
  }

  .lap-three-tenths {
    width: 30%;
  }

  .lap-seven-tenths {
    width: 70%;
  }

  .lap-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  .lap-one-twelfth {
    width: 8.333%;
  }

  .lap-five-twelfths {
    width: 41.666%;
  }

  .lap-seven-twelfths {
    width: 58.333%;
  }

  .lap-eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (min-width: 570px) {
  /**
  * Whole
  */
  .lap-and-up-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  .lap-and-up-one-half, .lap-and-up-six-twelfths, .lap-and-up-five-tenths, .lap-and-up-four-eighths, .lap-and-up-three-sixths, .lap-and-up-two-quarters {
    width: 50%;
  }

  /**
  * Thirds
  */
  .lap-and-up-one-third, .lap-and-up-four-twelfths, .lap-and-up-two-sixths {
    width: 33.333%;
  }

  .lap-and-up-two-thirds, .lap-and-up-eight-twelfths, .lap-and-up-four-sixths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  .lap-and-up-one-quarter, .lap-and-up-three-twelfths, .lap-and-up-two-eighths {
    width: 25%;
  }

  .lap-and-up-three-quarters, .lap-and-up-nine-twelfths, .lap-and-up-six-eighths {
    width: 75%;
  }

  /**
  * Fifths
  */
  .lap-and-up-one-fifth, .lap-and-up-two-tenths {
    width: 20%;
  }

  .lap-and-up-two-fifths, .lap-and-up-four-tenths {
    width: 40%;
  }

  .lap-and-up-three-fifths, .lap-and-up-six-tenths {
    width: 60%;
  }

  .lap-and-up-four-fifths, .lap-and-up-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  .lap-and-up-one-sixth, .lap-and-up-two-twelfths {
    width: 16.666%;
  }

  .lap-and-up-five-sixths, .lap-and-up-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  .lap-and-up-one-eighth {
    width: 12.5%;
  }

  .lap-and-up-three-eighths {
    width: 37.5%;
  }

  .lap-and-up-five-eighths {
    width: 62.5%;
  }

  .lap-and-up-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  .lap-and-up-one-tenth {
    width: 10%;
  }

  .lap-and-up-three-tenths {
    width: 30%;
  }

  .lap-and-up-seven-tenths {
    width: 70%;
  }

  .lap-and-up-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  .lap-and-up-one-twelfth {
    width: 8.333%;
  }

  .lap-and-up-five-twelfths {
    width: 41.666%;
  }

  .lap-and-up-seven-twelfths {
    width: 58.333%;
  }

  .lap-and-up-eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (max-width: 1023px) {
  /**
  * Whole
  */
  .portable-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  .portable-one-half, .portable-six-twelfths, .portable-five-tenths, .portable-four-eighths, .portable-three-sixths, .portable-two-quarters {
    width: 50%;
  }

  /**
  * Thirds
  */
  .portable-one-third, .portable-four-twelfths, .portable-two-sixths {
    width: 33.333%;
  }

  .portable-two-thirds, .portable-eight-twelfths, .portable-four-sixths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  .portable-one-quarter, .portable-three-twelfths, .portable-two-eighths {
    width: 25%;
  }

  .portable-three-quarters, .portable-nine-twelfths, .portable-six-eighths {
    width: 75%;
  }

  /**
  * Fifths
  */
  .portable-one-fifth, .portable-two-tenths {
    width: 20%;
  }

  .portable-two-fifths, .portable-four-tenths {
    width: 40%;
  }

  .portable-three-fifths, .portable-six-tenths {
    width: 60%;
  }

  .portable-four-fifths, .portable-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  .portable-one-sixth, .portable-two-twelfths {
    width: 16.666%;
  }

  .portable-five-sixths, .portable-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  .portable-one-eighth {
    width: 12.5%;
  }

  .portable-three-eighths {
    width: 37.5%;
  }

  .portable-five-eighths {
    width: 62.5%;
  }

  .portable-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  .portable-one-tenth {
    width: 10%;
  }

  .portable-three-tenths {
    width: 30%;
  }

  .portable-seven-tenths {
    width: 70%;
  }

  .portable-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  .portable-one-twelfth {
    width: 8.333%;
  }

  .portable-five-twelfths {
    width: 41.666%;
  }

  .portable-seven-twelfths {
    width: 58.333%;
  }

  .portable-eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (min-width: 1024px) {
  /**
  * Whole
  */
  .desk-one-whole {
    width: 100%;
  }

  /**
  * Halves
  */
  .desk-one-half, .desk-six-twelfths, .desk-five-tenths, .desk-four-eighths, .desk-three-sixths, .desk-two-quarters {
    width: 50%;
  }

  /**
  * Thirds
  */
  .desk-one-third, .desk-four-twelfths, .desk-two-sixths {
    width: 33.333%;
  }

  .desk-two-thirds, .desk-eight-twelfths, .desk-four-sixths {
    width: 66.666%;
  }

  /**
  * Quarters
  */
  .desk-one-quarter, .desk-three-twelfths, .desk-two-eighths {
    width: 25%;
  }

  .desk-three-quarters, .desk-nine-twelfths, .desk-six-eighths {
    width: 75%;
  }

  /**
  * Fifths
  */
  .desk-one-fifth, .desk-two-tenths {
    width: 20%;
  }

  .desk-two-fifths, .desk-four-tenths {
    width: 40%;
  }

  .desk-three-fifths, .desk-six-tenths {
    width: 60%;
  }

  .desk-four-fifths, .desk-eight-tenths {
    width: 80%;
  }

  /**
  * Sixths
  */
  .desk-one-sixth, .desk-two-twelfths {
    width: 16.666%;
  }

  .desk-five-sixths, .desk-ten-twelfths {
    width: 83.333%;
  }

  /**
  * Eighths
  */
  .desk-one-eighth {
    width: 12.5%;
  }

  .desk-three-eighths {
    width: 37.5%;
  }

  .desk-five-eighths {
    width: 62.5%;
  }

  .desk-seven-eighths {
    width: 87.5%;
  }

  /**
  * Tenths
  */
  .desk-one-tenth {
    width: 10%;
  }

  .desk-three-tenths {
    width: 30%;
  }

  .desk-seven-tenths {
    width: 70%;
  }

  .desk-nine-tenths {
    width: 90%;
  }

  /**
  * Twelfths
  */
  .desk-one-twelfth {
    width: 8.333%;
  }

  .desk-five-twelfths {
    width: 41.666%;
  }

  .desk-seven-twelfths {
    width: 58.333%;
  }

  .desk-eleven-twelfths {
    width: 91.666%;
  }
}
/**
 * If you have set the additional `$responsive-extra` variable to ‘true’ in
 * `_vars.scss` then you now have access to the following class available to
 * accomodate much larger screen resolutions.
 */
/* endif */
/*------------------------------------*\
    $PUSH
\*------------------------------------*/
/**
 * Push classes, to move grid items over to the right by certain amounts.
 */
/*------------------------------------*\
    $PULL
\*------------------------------------*/
/**
 * Pull classes, to move grid items over to the right by certain amounts.
 */
/*------------------------------------*\
    $BRAND
\*------------------------------------*/
/**
 * `.brand` is a quick and simple way to apply your brand face and/or color to
 * any element using a handy helper class.
 */
.brand {
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Arial, sans-serif!important;
  color: #00857E!important;
}

.brand-face {
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Arial, sans-serif!important;
}

.brand-color,
.brand-colour {
  color: #00857E!important;
}

/*------------------------------------*\
    $HELPER
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * Add/remove floats
 */
.float--right {
  float: right !important;
}

.float--left {
  float: left !important;
}

.float--none {
  float: none !important;
}

/**
 * Text alignment
 */
.text--left {
  text-align: left !important;
}

.text--center {
  text-align: center !important;
}

.text--right {
  text-align: right !important;
}

/**
 * Font weights
 */
.weight--light {
  font-weight: 300 !important;
}

.weight--normal {
  font-weight: 400 !important;
}

.weight--semibold {
  font-weight: 600 !important;
}

/**
 * Add/remove margins
 */
.push {
  margin: 28px !important;
}

.push--top {
  margin-top: 28px !important;
}

.push--right {
  margin-right: 28px !important;
}

.push--bottom {
  margin-bottom: 28px !important;
}

.push--left {
  margin-left: 28px !important;
}

.push--ends {
  margin-top: 28px !important;
  margin-bottom: 28px !important;
}

.push--sides {
  margin-right: 28px !important;
  margin-left: 28px !important;
}

.push-half {
  margin: 14px !important;
}

.push-half--top {
  margin-top: 14px !important;
}

.push-half--right {
  margin-right: 14px !important;
}

.push-half--bottom {
  margin-bottom: 14px !important;
}

.push-half--left {
  margin-left: 14px !important;
}

.push-half--ends {
  margin-top: 14px !important;
  margin-bottom: 14px !important;
}

.push-half--sides {
  margin-right: 14px !important;
  margin-left: 14px !important;
}

.flush {
  margin: 0 !important;
}

.flush--top {
  margin-top: 0 !important;
}

.flush--right {
  margin-right: 0 !important;
}

.flush--bottom {
  margin-bottom: 0 !important;
}

.flush--left {
  margin-left: 0 !important;
}

.flush--ends {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
}

.flush--sides {
  margin-right: 0 !important;
  margin-left: 0 !important;
}

/**
 * Add/remove paddings
 */
.soft {
  padding: 28px !important;
}

.soft--top {
  padding-top: 28px !important;
}

.soft--right {
  padding-right: 28px !important;
}

.soft--bottom {
  padding-bottom: 28px !important;
}

.soft--left {
  padding-left: 28px !important;
}

.soft--ends {
  padding-top: 28px !important;
  padding-bottom: 28px !important;
}

.soft--sides {
  padding-right: 28px !important;
  padding-left: 28px !important;
}

.soft-half {
  padding: 14px !important;
}

.soft-half--top {
  padding-top: 14px !important;
}

.soft-half--right {
  padding-right: 14px !important;
}

.soft-half--bottom {
  padding-bottom: 14px !important;
}

.soft-half--left {
  padding-left: 14px !important;
}

.soft-half--ends {
  padding-top: 14px !important;
  padding-bottom: 14px !important;
}

.soft-half--sides {
  padding-right: 14px !important;
  padding-left: 14px !important;
}

.hard {
  padding: 0 !important;
}

.hard--top {
  padding-top: 0 !important;
}

.hard--right {
  padding-right: 0 !important;
}

.hard--bottom {
  padding-bottom: 0 !important;
}

.hard--left {
  padding-left: 0 !important;
}

.hard--ends {
  padding-top: 0 !important;
  padding-bottom: 0 !important;
}

.hard--sides {
  padding-right: 0 !important;
  padding-left: 0 !important;
}

/**
 * Pull items full width of `.island` parents.
 */
.full-bleed {
  margin-right: -28px !important;
  margin-left: -28px !important;
}
.islet .full-bleed, .twitter .full-bleed {
  margin-right: -14px !important;
  margin-left: -14px !important;
}

/**
 * Add a help cursor to any element that gives the user extra information on
 * `:hover`.
 */
.informative {
  cursor: help !important;
}

/**
 * Mute an object by reducing its opacity.
 */
.muted {
  opacity: 0.5 !important;
  filter: alpha(opacity=50) !important;
}

/**
 * Align items to the right where they imply progression/movement forward, e.g.:
 *
   <p class=proceed><a href=#>Read more...</a></p>
 *
 */
.proceed {
  text-align: right !important;
}

/**
 * Add a right-angled quote to links that imply movement, e.g.:
 *
   <a href=# class=go>Read more</a>
 *
 */
.go:after {
  content: " " "»" !important;
}

/**
 * Apply capital case to an element (usually a `strong`).
 */
.caps {
  text-transform: uppercase !important;
}

/**
 * Hide content off-screen without resorting to `display:none;`, also provide
 * breakpoint specific hidden elements.
 */
.accessibility,
.visuallyhidden,
.hide-inputs input {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
}

@media only screen and (max-width: 569px) {
  .accessibility--palm,
.visuallyhidden--palm {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
  }
}
@media only screen and (min-width: 570px) and (max-width: 1023px) {
  .accessibility--lap,
.visuallyhidden--lap {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
  }
}
@media only screen and (min-width: 570px) {
  .accessibility--lap-and-up,
.visuallyhidden--lap-and-up {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
  }
}
@media only screen and (max-width: 1023px) {
  .accessibility--portable,
.visuallyhidden--portable {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
  }
}
@media only screen and (min-width: 1024px) {
  .accessibility--desk,
.visuallyhidden--desk {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
  }
}
@media only screen and (min-width: 1200px) {
  .accessibility--desk-wide,
.visuallyhidden--desk-wide {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
  }
}
/* endif */
/**
 * Generic utility bits
 */
/*------------------------------------*\
    $SILENT CLASSES
\*------------------------------------*/
/**
 * A bunch of silent classes to let us extend
 * selectors in palm.scss without any overhead
 *
 * I've not aliases everything because that would lead to
 * the probability of lots of unneccessary classes, instead
 * just add more here as and when you need them
 */
/*------------------------------------*\
    $ALIASES
\*------------------------------------*/
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Media query for the device pixel ratio
 */
/**
 * Make a max-width mq with manual pixel values.
 */
/**
 * Size an svg icon, does width, height and background size
 */
/**
 * Go inline block
 */
/**
 * A container setup
 */
/**
 * Opacity
 */
/**
 * Disable text select
 */
/**
 * Makes an image a block and fluid
 */
.banner-img img, .btn-img img {
  display: block;
  width: 100%;
  height: auto;
  max-width: none;
}

/**
 * State related things
 */
/**
 * This extends the defualt margin push/pull to add a responsive top / bottom one
 *
 */
@media only screen and (max-width: 569px) {
  .palm-push--top {
    margin-top: 28px !important;
  }

  .palm-push--bottom {
    margin-bottom: 28px !important;
  }
}
/**
 * This extends the defualt grid push/pull to just turn it off responsively.
 *
 * We do this and then we don't have to turn on the
 * responsive push/pull which is huge as typically we
 * just need to turn it off for mobile and leave on
 * for everything else
 */
@media only screen and (max-width: 569px) {
  .push--palm-none {
    left: auto;
  }

  .pull--palm-none {
    right: auto;
  }
}
/**
 * This extends the defualt margin push/pull to add a responsive top / bottom one
 *
 */
@media only screen and (min-width: 570px) and (max-width: 1023px) {
  .lap-push--top {
    margin-top: 28px !important;
  }

  .lap-push--bottom {
    margin-bottom: 28px !important;
  }
}
/**
 * This extends the defualt grid push/pull to just turn it off responsively.
 *
 * We do this and then we don't have to turn on the
 * responsive push/pull which is huge as typically we
 * just need to turn it off for mobile and leave on
 * for everything else
 */
@media only screen and (min-width: 570px) and (max-width: 1023px) {
  .push--lap-none {
    left: auto;
  }

  .pull--lap-none {
    right: auto;
  }
}
/**
 * This extends the defualt margin push/pull to add a responsive top / bottom one
 *
 */
@media only screen and (min-width: 570px) {
  .lap-and-up-push--top {
    margin-top: 28px !important;
  }

  .lap-and-up-push--bottom {
    margin-bottom: 28px !important;
  }
}
/**
 * This extends the defualt grid push/pull to just turn it off responsively.
 *
 * We do this and then we don't have to turn on the
 * responsive push/pull which is huge as typically we
 * just need to turn it off for mobile and leave on
 * for everything else
 */
@media only screen and (min-width: 570px) {
  .push--lap-and-up-none {
    left: auto;
  }

  .pull--lap-and-up-none {
    right: auto;
  }
}
/**
 * This extends the defualt margin push/pull to add a responsive top / bottom one
 *
 */
@media only screen and (max-width: 1023px) {
  .portable-push--top {
    margin-top: 28px !important;
  }

  .portable-push--bottom {
    margin-bottom: 28px !important;
  }
}
/**
 * This extends the defualt grid push/pull to just turn it off responsively.
 *
 * We do this and then we don't have to turn on the
 * responsive push/pull which is huge as typically we
 * just need to turn it off for mobile and leave on
 * for everything else
 */
@media only screen and (max-width: 1023px) {
  .push--portable-none {
    left: auto;
  }

  .pull--portable-none {
    right: auto;
  }
}
/**
 * This extends the defualt margin push/pull to add a responsive top / bottom one
 *
 */
@media only screen and (min-width: 1024px) {
  .desk-push--top {
    margin-top: 28px !important;
  }

  .desk-push--bottom {
    margin-bottom: 28px !important;
  }
}
/**
 * This extends the defualt grid push/pull to just turn it off responsively.
 *
 * We do this and then we don't have to turn on the
 * responsive push/pull which is huge as typically we
 * just need to turn it off for mobile and leave on
 * for everything else
 */
@media only screen and (min-width: 1024px) {
  .push--desk-none {
    left: auto;
  }

  .pull--desk-none {
    right: auto;
  }
}
/**
 * This extends the defualt margin push/pull to add a responsive top / bottom one
 *
 */
@media only screen and (min-width: 1200px) {
  .desk-wide-push--top {
    margin-top: 28px !important;
  }

  .desk-wide-push--bottom {
    margin-bottom: 28px !important;
  }
}
/**
 * This extends the defualt grid push/pull to just turn it off responsively.
 *
 * We do this and then we don't have to turn on the
 * responsive push/pull which is huge as typically we
 * just need to turn it off for mobile and leave on
 * for everything else
 */
@media only screen and (min-width: 1200px) {
  .push--desk-wide-none {
    left: auto;
  }

  .pull--desk-wide-none {
    right: auto;
  }
}
/**
 * Base styles; mostly unclassed HTML elements etc.
 */
/*------------------------------------*\
    $BOX-SIZING
\*------------------------------------*/
/**
 * A class to remove border box on things and ALL ITS CHILDREN.
 * Useful for third-party stuff like google maps.
 */
.no-border-box,
.no-border-box *, .no-border-box:before, .no-border-box:after {
  -ms-box-sizing: content-box;
  -o-box-sizing: content-box;
  box-sizing: content-box;
}

/* endif */
/*------------------------------------*\
    $MAIN
\*------------------------------------*/
html {
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Arial, sans-serif;
  background: #fff;
  color: #222222;
  overflow: auto;
}

/*------------------------------------*\
    $TYPE
\*------------------------------------*/
/**
 * Colour in selected text
 */

::selection {
  background: #00857E;
  color: #fff;
  text-shadow: none;
}

/**
 * Default links
 */
a {
  color: #007fad;
  text-decoration: none;
  font-weight: bold;
}
a:focus, a:hover {
  color: #333344;
  text-decoration: underline;
}
a:focus {
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}

/**
 * Body text resets
 */
.body ul, .body ol {
  margin-left: 22px;
}
.body ul li, .body ol li {
  padding-left: 14px;
  margin-bottom: 14px;
}

/**
 * a default time style that might be used anywhere
 */
/**
 * Coloured text and links
 */
.text--brand {
  color: #00857E;
}

.text--teal {
  color: #00857E;
}

.text--magenta {
  color: #C84182;
}

.text--lavender {
  color: #825da8;
}

.text--turquoise {
  color: #007fad;
}

.text--navy {
  color: #517481;
}

.text--blue {
  color: #3C78b4;
}

.text--red {
  color: #DB0000;
}

.text--green {
  color: #008000;
}

.text--positive {
  color: #008000;
}

.text--negative {
  color: #DB0000;
}

.text--alert {
  color: #DB0000;
}

.text--pink {
  color: #cc00cc;
}

.text--indigo {
  color: #9d14ff;
}

/**
 * AO: a class to limit line width to a comfortable reading length
 */
.read-length {
  max-width: 32em;
}

/*------------------------------------*\
    $FONTS
\*------------------------------------*/
/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * Fix inuit's bug with not being able to override these in vars
 */
blockquote {
  quotes: "“" "”";
}
blockquote p:before {
  content: "“";
  content: open-quote;
}
blockquote p:after {
  content: "";
  content: no-close-quote;
}
blockquote p:last-of-type:after {
  content: "”";
  content: close-quote;
}
blockquote q:before {
  content: "‘";
  content: open-quote;
}
blockquote q:after {
  content: "’";
  content: close-quote;
}

/*------------------------------------*\
    $SMALLPRINT
\*------------------------------------*/
.smallprint, .milli, .micro {
  line-height: 18px;
}

/*------------------------------------*\
    $PARAGRAPHS
\*------------------------------------*/
.lede,
.lead {
  font-size: 22.5px;
  font-size: 1.25rem;
  line-height: 1.2444444444;
  font-weight: bold;
  color: #444;
}

/*------------------------------------*\
    $HEADINGS
\*------------------------------------*/
h1, h2, h3, h4, h5, h6 {
  color: #444;
}

/**
 * Override most of the inuit ones to sort out the line-height
 */
h1, .alpha {
  line-height: 1.3;
}

h2, .beta {
  line-height: 1.3;
}

h3, .gamma {
  line-height: 1.4;
}

h4, .delta {
  line-height: 1.5;
}

h5, .epsilon {
  line-height: 1.5;
}

h6, .zeta {
  line-height: 1.5;
}

/**
 * Title styles
 * AO: change title-block color to navy; title-block__sub to accessible grey
 */
.title {
  font-size: 60px;
  font-size: 3.3333333333rem;
  line-height: 1.2;
  font-weight: lighter;
  border-bottom: solid 1px #999;
  padding-bottom: 14px;
}

.title-block, .twitter__title {
  font-size: 20px;
  font-size: 1.1111111111rem;
  line-height: 1.4;
  color: #517481;
  font-weight: bold;
  padding-bottom: 7px;
  border-bottom: 1px solid #dedede;
}
.title-block .title-block__sub, .twitter__title .title-block__sub, .twitter__title a {
  font-size: 13px;
  font-size: 0.7222222222rem;
  line-height: 2.1538461538;
  font-weight: bold;
  text-transform: uppercase;
  color: #767474;
  float: right;
}
.title-block a.title-block__sub:active, .twitter__title a:active,
.title-block a.title-block__sub:hover,
.twitter__title a:hover {
  color: #007fad;
}
.title-block a.title-block__sub:active:active, .twitter__title a:active:active, .title-block a.title-block__sub:active:focus, .title-block a.title-block__sub:active:hover,
.title-block a.title-block__sub:hover:active,
.title-block a.title-block__sub:hover:focus,
.title-block a.title-block__sub:hover:hover,
.twitter__title a:hover:hover {
  color: #333344;
}
.title-block a.title-block__sub:active:focus, .twitter__title a:active:focus,
.title-block a.title-block__sub:hover:focus,
.twitter__title a:hover:focus {
  background: #b8ecff;
  outline: 3px solid #b8ecff;
}

/*------------------------------------*\
    $FORMS
\*------------------------------------*/
/**
 * Default styling for all forms, with error styles
 * AO: make grey text accessible
 */
.text-input, .select {
  font-size: 18px;
  font-size: 1rem;
  margin: 0 0 28px 0;
  padding: 14px;
  width: 100%;
  display: block;
  color: #444;
  background-color: #fff;
  border: 1px solid #ccc;
  transition: all 0.15s linear;
}
.text-input:hover, .select:hover, .text-input:focus, .select:focus {
  background-color: #eee;
  color: #444;
  outline: none;
  border-color: #bbb;
}

textarea.text-input, textarea.select {
  height: auto;
}

.text-input--inline {
  display: inline;
  width: auto;
}

.spoken-form .btn {
  display: inline-block;
  *display: inline;
  zoom: 1;
  vertical-align: top;
}

.no-label {
  margin-top: 28px;
}

/**
 * Labels
 * AO: edit color to reduce heaviness
 */
label {
  color: #444;
  font-weight: bold;
  margin-bottom: 14px;
}

/**
 * Placeholders
 *
 * These need to be on separate lines as if the browser
 * can't understand a selector it will invalidate the whole line.
 *
 * There is a .placeholder class that will could be used for when
 * the browser doesn't support @placeholder and js adds it.
 *
 * AO: make placeholder text an accessible grey; add italic style; adjust selectors; add opacity:1 to moz version
 */
input::-webkit-input-placeholder {
  color: #757575;
  font-size: 18px;
  font-size: 1rem;
  font-style: italic;
}

input::-moz-placeholder {
  color: #757575;
  font-size: 18px;
  font-size: 1rem;
  font-style: italic;
  opacity: 1 !important;
}

input:-ms-placeholder {
  color: #757575;
  font-size: 18px;
  font-size: 1rem;
  font-style: italic;
}

input::-ms-input-placeholder {
  color: #757575;
  font-size: 18px;
  font-size: 1rem;
  font-style: italic;
}

input::placeholder {
  color: #757575;
  font-size: 18px;
  font-size: 1rem;
  font-style: italic;
}

input.placeholder {
  color: #757575;
  font-size: 18px;
  font-size: 1rem;
  font-style: italic;
}

/**
 * Hides any inputs that are inside so that we
 * can have pretty styling for radios / checkboxes
 */
/**
 * Selects
 */
.select {
  -webkit-appearance: none;
  -moz-appearance: none;
  -ms-appearance: none;
  -o-appearance: none;
  appearance: none;
  text-indent: 0.01px;
  text-overflow: "";
  border-radius: 0;
}
@-moz-document url-prefix() {
  .select {
    background-image: none !important;
  }
}
@media only screen and (max-width: 569px) {
  .select {
    text-indent: 5px;
  }
}
.select:-moz-focusring {
  color: transparent;
  text-shadow: 0 0 0 #000;
}
.select::-ms-expand {
  display: none;
}

/**
 * Icons on forms
 *
 * list here any icons that may be used on forms to
 * apply a right aligned style and fix the width problems
 */
.icon__select-error,
.icon__select-success,
.icon__select,
.icon__error,
.icon__success {
  padding-right: 50px;
  width: 100% !important;
  height: auto !important;
  background-position: center right;
}

.spoken-form .icon__select-error,
.spoken-form .icon__select-success,
.spoken-form .icon__select,
.spoken-form .icon__error,
.spoken-form .icon__success {
  width: inherit !important;
}

/**
 * Text in forms
 */
form .lede,
form .lead {
  font-size: 22px;
  font-size: 1.2222222222rem;
}

/**
 * Criteria
 *
 * Typical scenario: a form has been filled in and you want
 * to dsiaply all the options the use selected
 *
 * Suggested markup:
 *
 <div class="criteria-group">
   <dl class="criteria">
     <dt class="criteria__name">First name</dt>
     <dd class="criteria__value">John</dd>
   </dl>
   <dl class="criteria">
     <dt class="criteria__name">Last name</dt>
     <dd class="criteria__value">Smith</dd>
   </dl>
   <dl class="criteria">
     <dt class="criteria__name">Place</dt>
     <dd class="criteria__value">Aldermarston (Berkshire)</dd>
   </dl>
 </div>
 *
 */
.criteria-group {
  margin-left: -28px;
}

.criteria {
  float: left;
  margin-left: 28px;
}

.criteria__name {
  font-weight: lighter;
  margin: 0;
}

.criteria__value {
  font-weight: bold;
  margin: 0;
}

/**
 * Groups of checkboxes and radios
 */
.check-list {
  display: inline-block;
  *display: inline;
  zoom: 1;
}
.check-list li {
  display: inline-block;
  *display: inline;
  zoom: 1;
  margin-right: 28px;
}

/**
 * Labels in check-lists
 */
.check-label,
.check-list label,
.check-list .label {
  margin-bottom: 0;
}

/*------------------------------------*\
    $TABLES
\*------------------------------------*/
table {
  /**
    * A style for captions
    * AO: make font-size smaller, tweak span color for accessibility, add .additional
  */
  /**
   * Bordering
   */
  border-top: 1px solid #cccccc;
  /**
   * Spacing
   * AO: do not understand wish to be rid of padding!
   */
  /**
   * Hovers
   */
  /**
   * On hover show any row-links - which should contain an icon like so:
   *
   <tr>
     <td>Something</td>
     <td>Something</td>
     <td>Something</td>
     <td>
       316
       <a href="#" class="row-link">
         <span class="accessibility">Link to entry</span>
         <i class="icon__eye" aria-hidden="true"></i>
       </a>
     </td>
   </tr>
   *
   */
}
table caption {
  font-size: 22px;
  font-size: 1.2222222222rem;
  text-align: left;
  font-weight: lighter;
  overflow: hidden;
}
table caption span {
  background: #f4f4f4;
  padding: 14px;
  color: #707070;
}
table caption span.additional {
  background: transparent;
  font-size: 14px;
  margin-bottom: 7px;
}
table th, table td {
  border: 0;
}
table [rowspan],
table [rowspan] ~ th,
table [rowspan] ~ td {
  border-top: 1px solid #cccccc;
}
table tbody tr:hover td {
  background: #f4f4f4;
}
table tbody td {
  position: relative;
}
table .row-link {
  display: none;
  line-height: 1;
  position: absolute;
  top: 50%;
  margin-top: -29px;
  right: -50px;
  padding-left: 50px;
  padding-top: 20px;
  padding-bottom: 20px;
}
table tbody tr:hover .row-link {
  display: block;
}

/**
 * Cell alignments
 */
[rowspan] {
  vertical-align: top;
}

/**
 * Data: AO: make text a little bigger, for comfort
 */
.table--data {
  font: 16px;
  font-family: "Source Sans Pro", "Helvetica Neue", Helvetica, Arial, sans-serif;
}

/**
 * A simple wrapping div to force the table to scroll
 * inside the website frame when its too large
 */
.table-wrapper {
  width: 100%;
}

/**
 * Objects and abstractions
 */
/*------------------------------------*\
    $OFF CANVAS
\*------------------------------------*/
/**
 * Off canvas content
 *
 * This makes the secondary content hidden off to the left
 * and provides a set of classes to allow the secondary
 * content to appear from the left, moving the primary content
 * nearly completely off screen to the right.
 *
 * The direction can be reversed with `.offcanvas--rev`
 *
 <a href="#" class="hide--lap-and-up oc-trigger" data-primary="#main" data-secondary="#sidebar">go off canvas</a>

 <div class="offcanvas  grid">
   <section id="sidebar" class="offcanvas__secondary  grid__item  one-third">
     Supplemental
   </section>

   <section id="main" class="offcanvas__primary  grid__item  two-thirds">
     Main Content
   </section>
 </div>
 *
 */
@media only screen and (max-width: 569px) {
  /**
   * Off-canvas wrapper container
   */
  .offcanvas {
    width: 100%;
    position: relative;
    overflow: hidden;
    margin: 0;
  }

  /**
   * Set up the primary element to be
   * showing and not the secondary element
   */
  .offcanvas__primary,
.offcanvas__secondary {
    display: block;
    position: relative;
    transition: 0.25s all ease-in;
  }

  .offcanvas__primary {
    width: 100%;
    float: right;
    z-index: 1;
  }

  .offcanvas__secondary {
    width: 85%;
    margin-left: -100%;
    float: left;
    z-index: 2;
  }

  /**
   * Active state - show the secondary and only
   * a small bit of the primary off to the right
   */
  .offcanvas--active .offcanvas__primary {
    margin-right: -85%;
  }
  .offcanvas--active .offcanvas__secondary {
    margin-left: 0;
  }

  /**
   * Alternative, reversed layout.
   */
  .offcanvas--rev .offcanvas__primary {
    padding-right: 0;
    float: left;
  }
  .offcanvas--rev .offcanvas__secondary {
    margin-left: 0;
    margin-right: -100%;
    float: right;
  }
  .offcanvas--rev.offcanvas--active .offcanvas__primary {
    margin-right: 0;
    margin-left: -85%;
  }
  .offcanvas--rev.offcanvas--active .offcanvas__secondary {
    margin-right: 0;
  }
}
/*------------------------------------*\
    $BEAUTONS
\*------------------------------------*/
/**
 * General style adjustments
 * AO: edit colours for accessibility; add focus state
 */
.btn {
  background: #007fad;
  border: 2px solid #007fad;
  color: #fff;
  text-align: center;
  font-weight: normal;
  padding-left: 1.25em;
  padding-right: 1.25em;
  line-height: 2.5;
  margin-bottom: 0.5em;
  transition: all 0.15s ease-in-out;
  border-radius: 4px;
}
.btn:focus, .btn:hover {
  color: #007fad;
  background: #fff;
  text-decoration: none;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}
.btn:active {
  text-decoration: none;
  transform: translate(0, 0.222222em);
}

/**
 * Pretty colours
 */
.btn--brand {
  background: #00857E;
  border-color: #00857E;
  color: #fff;
}
.btn--brand:focus, .btn--brand:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--project {
  background: #00857E;
  border-color: #00857E;
  color: #fff;
}
.btn--project:focus, .btn--project:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--teal {
  background: #00857E;
  border-color: #00857E;
  color: #fff;
}
.btn--teal:focus, .btn--teal:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--magenta {
  background: #C84182;
  border-color: #C84182;
  color: #fff;
}
.btn--magenta:focus, .btn--magenta:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--lavender {
  background: #825da8;
  border-color: #825da8;
  color: #fff;
}
.btn--lavender:focus, .btn--lavender:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--turquoise {
  background: #007fad;
  border-color: #007fad;
  color: #fff;
}
.btn--turquoise:focus, .btn--turquoise:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--navy {
  background: #517481;
  border-color: #517481;
  color: #fff;
}
.btn--navy:focus, .btn--navy:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--blue {
  background: #3C78b4;
  border-color: #3C78b4;
  color: #fff;
}
.btn--blue:focus, .btn--blue:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--neutral {
  background: #707070;
  border-color: #707070;
  color: #fff;
}
.btn--neutral:focus, .btn--neutral:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--grey {
  background: #444444;
  border-color: #444444;
  color: #f4f4f4;
}
.btn--grey:focus, .btn--grey:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--dark {
  background: #333333;
  border-color: #333333;
  color: #dedede;
}
.btn--dark:focus, .btn--dark:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--negative {
  background: #DB0000;
  border-color: #DB0000;
  color: #fff;
}
.btn--negative:focus, .btn--negative:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--positive {
  background: #008000;
  border-color: #008000;
  color: #fff;
}
.btn--positive:focus, .btn--positive:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--alert {
  background: #ffb500;
  border-color: #ffb500;
  color: #222222;
}
.btn--alert:focus, .btn--alert:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

.btn--light {
  background: #f4f4f4;
  border-color: #f4f4f4;
  color: #444444;
}
.btn--light:focus, .btn--light:hover {
  background: #fff;
  border-color: #007fad;
  -ms-box-shadow: 0 0.222222em 0 #ccc;
  -o-box-shadow: 0 0.222222em 0 #ccc;
  box-shadow: 0 0.222222em 0 #ccc;
}

/**
 * Small
 *
 * Just turns down the font size and lets the line-height change the verticals
 */
.btn--small, .spoken-form .btn {
  font-size: 14px;
  font-size: 0.7777777778rem;
  line-height: 2;
}

/**
 * Large
 *
 * Turns up the text size and re-does the surrounding space
 */
.btn--large {
  font-size: 22px;
  font-size: 1.2222222222rem;
  line-height: 2.75;
  padding-left: 1em;
  padding-right: 1em;
}

/**
 * Use this when adding an icon inside a `.btn`
 */
.btn__icon {
  vertical-align: middle;
  margin-top: -4px;
  margin-left: 0.75em;
}

.btn__icon--left {
  margin-left: 0;
  margin-right: 0.75em;
}

/**
 * A button with an <img> inside it
 */
.btn-img {
  position: relative;
  display: block;
  text-align: center;
  color: #666;
}
.btn-img span {
  position: absolute;
  right: 0;
  left: 0;
  top: 50%;
  bottom: 0;
  height: 86px;
  margin-top: -43px;
  vertical-align: middle;
  font-size: 36px;
  font-size: 2rem;
  line-height: 1.2;
  font-weight: bold;
  text-transform: uppercase;
  padding: 0 28px;
}

/*------------------------------------*\
    $CONTAINER
\*------------------------------------*/
/**
 * A 960 container on lap_and_up, we just leave it
 * fullwidth and pad the sides here on palm
 */
.container {
  padding-left: 28px;
  padding-right: 28px;
}

.island > .container, .banner > .container,
.islet > .container,
.twitter > .container {
  padding-left: 0;
  padding-right: 0;
}

/*------------------------------------*\
    $NAV
\*------------------------------------*/
/**
 * Tweak the default from inuit
 */
.nav--stacked > li, .site__header__nav .main-nav ul > li, .validation-list > li, .sub-nav ul > li, .sub-nav > li {
  margin-bottom: 7px;
}
.nav--stacked > li:last-child, .site__header__nav .main-nav ul > li:last-child, .validation-list > li:last-child, .sub-nav ul > li:last-child, .sub-nav > li:last-child {
  margin-bottom: 0;
}

/**
 * A stacked blocky sub nav with open and active states
 * AO: edit colours, add focus states, remove link-like stuff from .active ('you are here')
 */
.sub-nav {
  font-size: 18px;
  font-size: 1rem;
  line-height: 1.5555555556;
  margin-bottom: -14px !important;
}
.sub-nav a {
  padding: 14px 0;
  color: #517481;
  font-weight: normal;
}
.sub-nav a:active, .sub-nav a:focus, .sub-nav a:hover {
  color: #333344;
  font-weight: normal;
}
.sub-nav a:focus {
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}
.sub-nav > li {
  border-bottom: 1px solid #dedede;
  margin-bottom: 0;
}
.sub-nav > li:last-child {
  border-bottom: 0;
}
.sub-nav > li.open > a {
  color: #007fad;
}
.sub-nav > li.open > a:active, .sub-nav > li.open > a:focus, .sub-nav > li.open > a:hover {
  color: #333344;
}
.sub-nav > li.open > a:focus {
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}
.sub-nav > li.active {
  margin-top: -1px;
  border: 0;
}
.sub-nav > li.active > a {
  background: #f4f4f4;
  margin-left: -14px;
  margin-right: -14px;
  padding-left: 14px;
  padding-right: 14px;
}
.sub-nav > li.active > a:focus, .sub-nav > li.active > a:hover {
  background: #f4f4f4;
  color: #517481 !important;
  cursor: text;
  text-decoration: none;
}
.sub-nav > li.active > a:hover {
  outline: none;
}
.sub-nav ul {
  font-size: 16px;
  font-size: 0.8888888889rem;
  line-height: 1.75;
  margin-bottom: 0;
}
.sub-nav ul > li a {
  padding: 7px 0;
}
.sub-nav ul > li.open > a {
  color: #007fad;
}
.sub-nav ul > li.open > a:active, .sub-nav ul > li.open > a:focus, .sub-nav ul > li.open > a:hover {
  background-color: #b8ecff;
  color: #333344;
}
.sub-nav ul > li.active > a {
  background: #f4f4f4;
  margin-left: -14px;
  margin-right: -14px;
  padding-left: 14px;
  padding-right: 14px;
}
.sub-nav ul ul a {
  padding-left: 42px;
}
.sub-nav ul ul .active a {
  padding-left: 56px;
}

/**
 * A 50% list designed to fit inside an `.islet--bordered`
 */
.boxed-nav {
  margin-top: -14px;
}
.boxed-nav > li {
  width: 50%;
  margin-top: 14px;
}
.boxed-nav a {
  font-size: 16px;
  font-size: 0.8888888889rem;
  color: #517481;
  font-weight: normal;
}
.boxed-nav a:active, .boxed-nav a:focus, .boxed-nav a:hover {
  color: #333344;
}
.boxed-nav a:focus {
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}

.no-text li a:focus, .no-text li a:hover, .no-text li a:active {
  background-color: transparent;
  outline: none;
}

/*------------------------------------*\
    $GRIDS
\*------------------------------------*/
/**
 * Modify the grid system to be float-based
 */
.grid {
  overflow: hidden;
}

/**
 * Grid
 */
.grid__item {
  display: block;
  float: left;
}

/**
 * Extends `.grid` and is half the gutters
 */
.grid--half {
  margin-left: -14px;
}
.grid--half .grid__item {
  padding-left: 14px;
}

/**
 * Extends `.grid` and is double the gutters
 */
.grid--double {
  margin-left: -56px;
}
.grid--double .grid__item {
  padding-left: 56px;
}

/*------------------------------------*\
   $STATS
\*------------------------------------*/
/**
 * This expands on inuits default stats object to add a bunch of styling
 * and remove the grid-like margins so we can center it all nicer with
 * a wrapping `.text--center`. Markup like so:

 <section class="text--center">

   <div class="stat-group">

     <header class="stat-group__header">
       <h3 class="stat-group__header__title">FreeReg Status</h3>
     </header>

     <dl class="stat">
       <dt class="stat__title">Marriages</dt>
       <dd class="stat__value  text--magenta">4,678,103</dd>
     </dl>

     <dl class="stat">
       <dt class="stat__title">Baptisms</dt>
       <dd class="stat__value  text--teal">4,678,103</dd>
     </dl>

     <dl class="stat">
       <dt class="stat__title">Burials</dt>
       <dd class="stat__value  text--brown">4,678,103</dd>
     </dl>

     <footer class="stat-group__footer">
       <p class="stat-group__footer__primary"><strong>LAST UPDATE:</strong> Started on 30.06.2014 and completed on 1.06.2014</p>
       <p class="stat-group__footer__secondary">On 8 AUG 2014 FreeReg did 26,330 searches</p>
     </footer>

   </div>

 </section>

 * AO: adjust grey for accessibility

 *
 */
.stat-group {
  text-align: center;
  display: inline-block;
  *display: inline;
  zoom: 1;
  margin: 0;
}

.stat {
  float: none;
  margin: 28px;
}

.stat__title {
  text-transform: uppercase;
  color: #517481;
  font-weight: bold;
}

.stat__value {
  font-size: 42px;
  font-size: 2.3333333333rem;
  line-height: 1.3333333333;
  font-weight: bold;
}

.stat-group__header {
  border-bottom: 1px solid #dddddd;
}

.stat-group__header__title {
  font-size: 18px;
  font-size: 1rem;
  line-height: 1.5555555556;
  font-weight: bold;
  margin-bottom: 7px;
  color: #517481;
}

.stat-group__footer {
  border-top: 1px solid #dddddd;
}

.stat-group__footer__primary,
.stat-group__footer__secondary {
  font-size: 14px;
  font-size: 0.7777777778rem;
  color: #707070;
  margin-top: 7px;
  margin-bottom: 14px;
}

.stat-group__footer__primary strong, .stat-group__footer__primary b {
  color: #517481;
}

/*------------------------------------*\
    $ISLAND
\*------------------------------------*/
/**
  * Loz and pill
  * AO: placed here to take advantage of islet colour schemes, if desired
  * AO: make colours accessible, increase lateral padding a little
  */
.loz, .pill {
  background-color: #707070;
  padding-left: 0.5em;
  padding-right: 0.5em;
}

/**
 * Colours for islands
 * AO: rewrite to accommodate new/accessible colour scheme
 */
.banner--brand,
.island--brand,
.islet--brand {
  color: #fff;
  background-color: #00857E;
}
.banner--brand a,
.island--brand a,
.islet--brand a {
  color: #fff;
  text-decoration: underline;
}
.banner--brand a:focus, .banner--brand a:hover,
.island--brand a:focus,
.island--brand a:hover,
.islet--brand a:focus,
.islet--brand a:hover {
  color: #333344;
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}
.banner--brand a.btn,
.island--brand a.btn,
.islet--brand a.btn {
  text-decoration: none;
  color: #fff;
}
.banner--brand a.btn:focus, .banner--brand a.btn:hover,
.island--brand a.btn:focus,
.island--brand a.btn:hover,
.islet--brand a.btn:focus,
.islet--brand a.btn:hover {
  background-color: #fff;
  border-color: #007fad;
  color: #007fad;
  outline: none;
}

a.banner--brand,
a.island--brand,
a.islet--brand {
  color: #fff;
  background-color: #00857E;
}
a.banner--brand:active, a.banner--brand:focus, a.banner--brand:hover,
a.island--brand:active,
a.island--brand:focus,
a.island--brand:hover,
a.islet--brand:active,
a.islet--brand:focus,
a.islet--brand:hover {
  color: #333344;
  background-color: #b8ecff;
}

.banner--project,
.island--project,
.islet--project {
  color: #fff;
  background-color: #00857E;
}
.banner--project a,
.island--project a,
.islet--project a {
  color: #fff;
  text-decoration: underline;
}
.banner--project a:focus, .banner--project a:hover,
.island--project a:focus,
.island--project a:hover,
.islet--project a:focus,
.islet--project a:hover {
  color: #333344;
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}
.banner--project a.btn,
.island--project a.btn,
.islet--project a.btn {
  text-decoration: none;
  color: #fff;
}
.banner--project a.btn:focus, .banner--project a.btn:hover,
.island--project a.btn:focus,
.island--project a.btn:hover,
.islet--project a.btn:focus,
.islet--project a.btn:hover {
  background-color: #fff;
  border-color: #007fad;
  color: #007fad;
  outline: none;
}

a.banner--project,
a.island--project,
a.islet--project {
  color: #fff;
  background-color: #00857E;
}
a.banner--project:active, a.banner--project:focus, a.banner--project:hover,
a.island--project:active,
a.island--project:focus,
a.island--project:hover,
a.islet--project:active,
a.islet--project:focus,
a.islet--project:hover {
  color: #333344;
  background-color: #b8ecff;
}

.banner--teal,
.island--teal,
.islet--teal {
  color: #fff;
  background-color: #00857E;
}
.banner--teal a,
.island--teal a,
.islet--teal a {
  color: #fff;
  text-decoration: underline;
}
.banner--teal a:focus, .banner--teal a:hover,
.island--teal a:focus,
.island--teal a:hover,
.islet--teal a:focus,
.islet--teal a:hover {
  color: #333344;
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}
.banner--teal a.btn,
.island--teal a.btn,
.islet--teal a.btn {
  text-decoration: none;
  color: #fff;
}
.banner--teal a.btn:focus, .banner--teal a.btn:hover,
.island--teal a.btn:focus,
.island--teal a.btn:hover,
.islet--teal a.btn:focus,
.islet--teal a.btn:hover {
  background-color: #fff;
  border-color: #007fad;
  color: #007fad;
  outline: none;
}

a.banner--teal,
a.island--teal,
a.islet--teal {
  color: #fff;
  background-color: #00857E;
}
a.banner--teal:active, a.banner--teal:focus, a.banner--teal:hover,
a.island--teal:active,
a.island--teal:focus,
a.island--teal:hover,
a.islet--teal:active,
a.islet--teal:focus,
a.islet--teal:hover {
  color: #333344;
  background-color: #b8ecff;
}

.banner--magenta,
.island--magenta,
.islet--magenta {
  color: #fff;
  background-color: #C84182;
}
.banner--magenta a,
.island--magenta a,
.islet--magenta a {
  color: #fff;
  text-decoration: underline;
}
.banner--magenta a:focus, .banner--magenta a:hover,
.island--magenta a:focus,
.island--magenta a:hover,
.islet--magenta a:focus,
.islet--magenta a:hover {
  color: #333344;
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}
.banner--magenta a.btn,
.island--magenta a.btn,
.islet--magenta a.btn {
  text-decoration: none;
  color: #fff;
}
.banner--magenta a.btn:focus, .banner--magenta a.btn:hover,
.island--magenta a.btn:focus,
.island--magenta a.btn:hover,
.islet--magenta a.btn:focus,
.islet--magenta a.btn:hover {
  background-color: #fff;
  border-color: #007fad;
  color: #007fad;
  outline: none;
}

a.banner--magenta,
a.island--magenta,
a.islet--magenta {
  color: #fff;
  background-color: #C84182;
}
a.banner--magenta:active, a.banner--magenta:focus, a.banner--magenta:hover,
a.island--magenta:active,
a.island--magenta:focus,
a.island--magenta:hover,
a.islet--magenta:active,
a.islet--magenta:focus,
a.islet--magenta:hover {
  color: #333344;
  background-color: #b8ecff;
}

.banner--lavender,
.island--lavender,
.islet--lavender {
  color: #fff;
  background-color: #825da8;
}
.banner--lavender a,
.island--lavender a,
.islet--lavender a {
  color: #fff;
  text-decoration: underline;
}
.banner--lavender a:focus, .banner--lavender a:hover,
.island--lavender a:focus,
.island--lavender a:hover,
.islet--lavender a:focus,
.islet--lavender a:hover {
  color: #333344;
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}
.banner--lavender a.btn,
.island--lavender a.btn,
.islet--lavender a.btn {
  text-decoration: none;
  color: #fff;
}
.banner--lavender a.btn:focus, .banner--lavender a.btn:hover,
.island--lavender a.btn:focus,
.island--lavender a.btn:hover,
.islet--lavender a.btn:focus,
.islet--lavender a.btn:hover {
  background-color: #fff;
  border-color: #007fad;
  color: #007fad;
  outline: none;
}

a.banner--lavender,
a.island--lavender,
a.islet--lavender {
  color: #fff;
  background-color: #825da8;
}
a.banner--lavender:active, a.banner--lavender:focus, a.banner--lavender:hover,
a.island--lavender:active,
a.island--lavender:focus,
a.island--lavender:hover,
a.islet--lavender:active,
a.islet--lavender:focus,
a.islet--lavender:hover {
  color: #333344;
  background-color: #b8ecff;
}

.banner--turquoise,
.island--turquoise,
.islet--turquoise {
  color: #fff;
  background-color: #007fad;
}
.banner--turquoise a,
.island--turquoise a,
.islet--turquoise a {
  color: #fff;
  text-decoration: underline;
}
.banner--turquoise a:focus, .banner--turquoise a:hover,
.island--turquoise a:focus,
.island--turquoise a:hover,
.islet--turquoise a:focus,
.islet--turquoise a:hover {
  color: #333344;
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}
.banner--turquoise a.btn,
.island--turquoise a.btn,
.islet--turquoise a.btn {
  text-decoration: none;
  color: #fff;
}
.banner--turquoise a.btn:focus, .banner--turquoise a.btn:hover,
.island--turquoise a.btn:focus,
.island--turquoise a.btn:hover,
.islet--turquoise a.btn:focus,
.islet--turquoise a.btn:hover {
  background-color: #fff;
  border-color: #007fad;
  color: #007fad;
  outline: none;
}

a.banner--turquoise,
a.island--turquoise,
a.islet--turquoise {
  color: #fff;
  background-color: #007fad;
}
a.banner--turquoise:active, a.banner--turquoise:focus, a.banner--turquoise:hover,
a.island--turquoise:active,
a.island--turquoise:focus,
a.island--turquoise:hover,
a.islet--turquoise:active,
a.islet--turquoise:focus,
a.islet--turquoise:hover {
  color: #333344;
  background-color: #b8ecff;
}

.banner--navy,
.island--navy,
.islet--navy {
  color: #fff;
  background-color: #517481;
}
.banner--navy a,
.island--navy a,
.islet--navy a {
  color: #fff;
  text-decoration: underline;
}
.banner--navy a:focus, .banner--navy a:hover,
.island--navy a:focus,
.island--navy a:hover,
.islet--navy a:focus,
.islet--navy a:hover {
  color: #333344;
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}
.banner--navy a.btn,
.island--navy a.btn,
.islet--navy a.btn {
  text-decoration: none;
  color: #fff;
}
.banner--navy a.btn:focus, .banner--navy a.btn:hover,
.island--navy a.btn:focus,
.island--navy a.btn:hover,
.islet--navy a.btn:focus,
.islet--navy a.btn:hover {
  background-color: #fff;
  border-color: #007fad;
  color: #007fad;
  outline: none;
}

a.banner--navy,
a.island--navy,
a.islet--navy {
  color: #fff;
  background-color: #517481;
}
a.banner--navy:active, a.banner--navy:focus, a.banner--navy:hover,
a.island--navy:active,
a.island--navy:focus,
a.island--navy:hover,
a.islet--navy:active,
a.islet--navy:focus,
a.islet--navy:hover {
  color: #333344;
  background-color: #b8ecff;
}

.banner--blue,
.island--blue,
.islet--blue {
  color: #fff;
  background-color: #3C78b4;
}
.banner--blue a,
.island--blue a,
.islet--blue a {
  color: #fff;
  text-decoration: underline;
}
.banner--blue a:focus, .banner--blue a:hover,
.island--blue a:focus,
.island--blue a:hover,
.islet--blue a:focus,
.islet--blue a:hover {
  color: #333344;
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}
.banner--blue a.btn,
.island--blue a.btn,
.islet--blue a.btn {
  text-decoration: none;
  color: #fff;
}
.banner--blue a.btn:focus, .banner--blue a.btn:hover,
.island--blue a.btn:focus,
.island--blue a.btn:hover,
.islet--blue a.btn:focus,
.islet--blue a.btn:hover {
  background-color: #fff;
  border-color: #007fad;
  color: #007fad;
  outline: none;
}

a.banner--blue,
a.island--blue,
a.islet--blue {
  color: #fff;
  background-color: #3C78b4;
}
a.banner--blue:active, a.banner--blue:focus, a.banner--blue:hover,
a.island--blue:active,
a.island--blue:focus,
a.island--blue:hover,
a.islet--blue:active,
a.islet--blue:focus,
a.islet--blue:hover {
  color: #333344;
  background-color: #b8ecff;
}

.banner--neutral,
.island--neutral,
.islet--neutral {
  color: #fff;
  background-color: #707070;
}
.banner--neutral a,
.island--neutral a,
.islet--neutral a {
  color: #fff;
  text-decoration: underline;
}
.banner--neutral a:focus, .banner--neutral a:hover,
.island--neutral a:focus,
.island--neutral a:hover,
.islet--neutral a:focus,
.islet--neutral a:hover {
  color: #333344;
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}
.banner--neutral a.btn,
.island--neutral a.btn,
.islet--neutral a.btn {
  text-decoration: none;
  color: #fff;
}
.banner--neutral a.btn:focus, .banner--neutral a.btn:hover,
.island--neutral a.btn:focus,
.island--neutral a.btn:hover,
.islet--neutral a.btn:focus,
.islet--neutral a.btn:hover {
  background-color: #fff;
  border-color: #007fad;
  color: #007fad;
  outline: none;
}

a.banner--neutral,
a.island--neutral,
a.islet--neutral {
  color: #fff;
  background-color: #707070;
}
a.banner--neutral:active, a.banner--neutral:focus, a.banner--neutral:hover,
a.island--neutral:active,
a.island--neutral:focus,
a.island--neutral:hover,
a.islet--neutral:active,
a.islet--neutral:focus,
a.islet--neutral:hover {
  color: #333344;
  background-color: #b8ecff;
}

.banner--grey,
.island--grey,
.islet--grey {
  color: #f4f4f4;
  background-color: #444444;
}
.banner--grey a,
.island--grey a,
.islet--grey a {
  color: #fff;
  text-decoration: underline;
}
.banner--grey a:focus, .banner--grey a:hover,
.island--grey a:focus,
.island--grey a:hover,
.islet--grey a:focus,
.islet--grey a:hover {
  color: #333344;
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}
.banner--grey a.btn,
.island--grey a.btn,
.islet--grey a.btn {
  text-decoration: none;
  color: #fff;
}
.banner--grey a.btn:focus, .banner--grey a.btn:hover,
.island--grey a.btn:focus,
.island--grey a.btn:hover,
.islet--grey a.btn:focus,
.islet--grey a.btn:hover {
  background-color: #fff;
  border-color: #007fad;
  color: #007fad;
  outline: none;
}

a.banner--grey,
a.island--grey,
a.islet--grey {
  color: #f4f4f4;
  background-color: #444444;
}
a.banner--grey:active, a.banner--grey:focus, a.banner--grey:hover,
a.island--grey:active,
a.island--grey:focus,
a.island--grey:hover,
a.islet--grey:active,
a.islet--grey:focus,
a.islet--grey:hover {
  color: #333344;
  background-color: #b8ecff;
}

.banner--dark,
.island--dark,
.islet--dark {
  color: #dedede;
  background-color: #333333;
}
.banner--dark a,
.island--dark a,
.islet--dark a {
  color: #fff;
  text-decoration: underline;
}
.banner--dark a:focus, .banner--dark a:hover,
.island--dark a:focus,
.island--dark a:hover,
.islet--dark a:focus,
.islet--dark a:hover {
  color: #333344;
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}
.banner--dark a.btn,
.island--dark a.btn,
.islet--dark a.btn {
  text-decoration: none;
  color: #fff;
}
.banner--dark a.btn:focus, .banner--dark a.btn:hover,
.island--dark a.btn:focus,
.island--dark a.btn:hover,
.islet--dark a.btn:focus,
.islet--dark a.btn:hover {
  background-color: #fff;
  border-color: #007fad;
  color: #007fad;
  outline: none;
}

a.banner--dark,
a.island--dark,
a.islet--dark {
  color: #dedede;
  background-color: #333333;
}
a.banner--dark:active, a.banner--dark:focus, a.banner--dark:hover,
a.island--dark:active,
a.island--dark:focus,
a.island--dark:hover,
a.islet--dark:active,
a.islet--dark:focus,
a.islet--dark:hover {
  color: #333344;
  background-color: #b8ecff;
}

.banner--light, .island--light, .islet--light {
  color: #222222;
  background-color: #f4f4f4;
}
.banner--light a, .island--light a, .islet--light a {
  color: #0078a3;
}
.banner--light a:active, .banner--light a:focus, .banner--light a:hover, .island--light a:active, .island--light a:focus, .island--light a:hover, .islet--light a:active, .islet--light a:focus, .islet--light a:hover {
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
  color: #333344;
}
.banner--light a.btn, .island--light a.btn, .islet--light a.btn {
  color: #fff;
}
.banner--light a.btn:focus, .banner--light a.btn:hover, .island--light a.btn:focus, .island--light a.btn:hover, .islet--light a.btn:focus, .islet--light a.btn:hover {
  background-color: #fff;
  border-color: #007fad;
  color: #007fad;
  outline: none;
}

a.banner--light, a.island--light, a.islet--light {
  background-color: #f4f4f4;
  color: #444444;
}
a.banner--light:active, a.banner--light:focus, a.banner--light:hover, a.island--light:active, a.island--light:focus, a.island--light:hover, a.islet--light:active, a.islet--light:focus, a.islet--light:hover {
  background-color: #b8ecff;
  color: #333344;
}

.banner--bordered,
.island--bordered,
.islet--bordered,
.twitter {
  background-color: #fff;
  border: 1px solid #dedede;
}

/**
 * We frequently drop containers inside islands so account for the last-child rule inside them
 */
.island > .container > :last-child, .banner > .container > :last-child,
.islet > .container > :last-child,
.twitter > .container > :last-child {
  margin-bottom: 0;
}

/**
 * Islets are usually used in sidebar / aside type situations, so we're going
 * to assume we alwasy want paragraphs slightly smaller there, if this is not
 * the case make as specific object for it to bump it back up.
 */
.islet p, .twitter p {
  font-size: 16px;
  font-size: 0.8888888889rem;
}

/*------------------------------------*\
    $BANNER
\*------------------------------------*/
/**
 * Essentially the same as `.island` but moved in
 * here so we can style over the top easier. The same
 * colours as `.island` uses will work as well.
 */
.banner {
  height: 311px;
  position: relative;
}

.banner__title {
  color: inherit;
  font-weight: lighter;
  font-size: 32px;
  font-size: 1.7777777778rem;
}

.banner__title--bold {
  font-weight: bold;
}

.banner__body {
  position: absolute;
  margin: 0;
  bottom: 28px;
  left: 28px;
  right: 28px;
  font-weight: lighter;
}

/**
 * Specifically _not_ inheriting island and just
 * fixing up the images inside it
 */
/**
 * To make all this work better on anything smaller
 * than desktops we will remove all the positioning
 */
@media only screen and (max-width: 1023px) {
  .banner {
    height: auto;
  }

  .banner__body {
    position: static;
  }
}
/**
 * A horizontal banner - only show on desktop
 */
.banner-horz {
  display: none;
}

/*------------------------------------*\
    $MATRIX
\*------------------------------------*/
/**
 * This just sorts the spacing a bit better
 */
.multi-list--spaced > li {
  padding-right: 28px;
}
.multi-list--spaced > li.end-col {
  padding-right: 0;
}

/**
 * This works a bit like - all-cols except it misses of the first one,
 * for example if you are in a four-col multi-list and want the last
 * row to only have one normal sized cell and the rest merged you would
 * use .last-three-cols on the last li tag.
 */
.matrix > .last-four-cols,
.multi-list > .last-four-cols,
.boxed-nav > .last-four-cols {
  width: 80%;
}

/*------------------------------------*\
    $PAGINATION
\*------------------------------------*/
/**
 * Building on inuit's and swapping in our icons
 */
.pagination {
  /**
   * Taking off inuit's whitespace hack, stick with commenting method.
   * AO: make colour accessible; reduce font-size (not using icons)
   */
  letter-spacing: normal;
  word-spacing: normal;
  font-size: 24px;
  font-size: 1.3333333333rem;
  font-weight: bold;
  color: #757575;
  /**
   * Space the <a>’s out slightly narrower and colour them
   * AO: reduce spacing further
   */
  /**
   * Icons
   */
}
.pagination > li {
  padding: 3.5px;
}
.pagination > li > a {
  padding: 3.5px;
  margin: -3.5px;
  color: #project-color;
}
.pagination > li > a:focus, .pagination > li > a:hover {
  background-color: #b8ecff;
  color: #333344;
}
.pagination i {
  margin-top: -5px;
  vertical-align: middle;
}

/*------------------------------------*\
    $BREADCRUMBS
\*------------------------------------*/
/**
 * Overrides inuit's default
 */
.breadcrumb > li + li:before {
  display: inline-block;
  *display: inline;
  zoom: 1;
  vertical-align: top;
  font-size: 1.2em;
  margin-top: 0.13em;
  content: "»";
}

.breadcrumb a, .breadcrumb--path a {
  color: #00857E;
}
.breadcrumb a:active, .breadcrumb a:focus, .breadcrumb a:hover, .breadcrumb--path a:active, .breadcrumb--path a:focus, .breadcrumb--path a:hover {
  color: #333344;
}
.breadcrumb a:focus, .breadcrumb--path a:focus {
  background-color: #b8ecff;
  outline: 3px solid #b8ecff;
}

/*------------------------------------*\
    $DATA
\*------------------------------------*/
/**
 * A list representation of data, best used with a dl:
 *

 <dl class="data">

   <dt class="data__name">County</dt>
   <dd class="data__value">Kent</dd>

   <dt class="data__name">Place</dt>
   <dd class="data__value">Deptford</dd>

   <dt class="data__name">Registration number</dt>
   <dd class="data__value">1924</dd>

   <dt class="data__name">Baptism date</dt>
   <dd class="data__value">1928</dd>

   <dt class="data__name">Gender</dt>
   <dd class="data__value">F</dd>

   <dt class="data__name">Person abode(s)</dt>
   <dd class="data__value">8 Franklin</dd>
   <dd class="data__value">42 Boston St</dd>

 </dl>

 *
 */
.data {
  border-bottom: 1px solid #dddddd;
  overflow: hidden;
  color: #222222;
}
.data .data__name,
.data .data__value {
  border-top: 1px solid #dddddd;
  margin: 0;
  padding-top: 14px;
  padding-bottom: 14px;
}
.data .data__name {
  text-align: left;
  float: left;
  clear: both;
  padding-right: 3.5px;
}
.data .data__value {
  float: right;
  font-weight: bold;
  padding-left: 3.5px;
}

/**
 * A more compact version
 */
.data--compact .data__value {
  font-weight: normal;
}

/*------------------------------------*\
    $VALIDATION
\*------------------------------------*/
/**
 * Validation list - this is designed to sit directly under a `.text-input`
 * AO: edit colours for accessibility
 */
.validation-list {
  margin-bottom: 28px;
  font-weight: bold;
}
.validation-list > li {
  margin-bottom: 0;
}
.validation-list .validation-list__error {
  color: #DB0000;
}
.validation-list .validation-list__success {
  color: #008000;
}

/**
 * Error/success styles for text inputs and selects
 */
.select--error,
.select--success,
.text-input--error,
.text-input--success {
  margin-bottom: 7px;
}

.select--error,
.text-input--error {
  border-color: #DB0000;
  color: #DB0000;
}
.select--error:hover, .select--error:focus,
.text-input--error:hover,
.text-input--error:focus {
  border-color: #DB0000;
}

.select--success,
.text-input--success {
  border-color: #008000;
  color: #008000;
}
.select--success:hover, .select--success:focus,
.text-input--success:hover,
.text-input--success:focus {
  border-color: #008000;
}

.text-input--success::-webkit-input-placeholder {
  color: #008000;
}

.text-input--success:-moz-placeholder {
  color: #008000;
}

.text-input--success:-ms-placeholder {
  color: #008000;
}

.text-input--success.placeholder {
  color: #008000;
}

.text-input--error::-webkit-input-placeholder {
  color: #DB0000;
}

.text-input--error:-moz-placeholder {
  color: #DB0000;
}

.text-input--error:-ms-placeholder {
  color: #DB0000;
}

.text-input--error.placeholder {
  color: #DB0000;
}

/*------------------------------------*\
    $TWITTER
\*------------------------------------*/
.twitter {
  padding-bottom: 7px;
}

.twitter__text {
  margin-bottom: 2px;
}

.twitter__tools {
  text-align: right;
  width: 100%;
  padding-top: 7px;
  border-top: 1px solid #dedede;
}
.twitter__tools li {
  margin-left: 7px;
}
.twitter__tools li.twitter__tools__follow {
  margin-left: 0;
  margin-right: 7px;
  float: left;
  border-right: 2px solid #fff;
}
.twitter__tools li.twitter__tools__follow a {
  font-size: 13px;
  font-size: 0.7222222222rem;
  line-height: 2.1538461538;
  color: #767474;
  font-weight: bold;
}
.twitter__tools li.twitter__tools__follow a:active, .twitter__tools li.twitter__tools__follow a:focus, .twitter__tools li.twitter__tools__follow a:hover {
  color: #334;
}

/**
 * Style trumps; helper and brand classes
 */
/*------------------------------------*\
    $HELPER
\*------------------------------------*/
/**
 * Some responsive helpers
 */
.clear--left {
  clear: left;
}

.clear--right {
  clear: right;
}

@media only screen and (max-width: 569px) {
  .palm-clear--left {
    clear: left;
  }

  .palm-clear--right {
    clear: right;
  }

  .palm-flush--bottom {
    margin: 0 !important;
  }
}
@media only screen and (min-width: 570px) and (max-width: 1023px) {
  .lap-clear--left {
    clear: left;
  }

  .lap-clear--right {
    clear: right;
  }

  .lap-flush--bottom {
    margin: 0 !important;
  }
}
@media only screen and (min-width: 570px) {
  .lap-and-up-clear--left {
    clear: left;
  }

  .lap-and-up-clear--right {
    clear: right;
  }

  .lap-and-up-flush--bottom {
    margin: 0 !important;
  }
}
@media only screen and (max-width: 1023px) {
  .portable-clear--left {
    clear: left;
  }

  .portable-clear--right {
    clear: right;
  }

  .portable-flush--bottom {
    margin: 0 !important;
  }
}
@media only screen and (min-width: 1024px) {
  .desk-clear--left {
    clear: left;
  }

  .desk-clear--right {
    clear: right;
  }

  .desk-flush--bottom {
    margin: 0 !important;
  }
}
@media only screen and (min-width: 1200px) {
  .desk-wide-clear--left {
    clear: left;
  }

  .desk-wide-clear--right {
    clear: right;
  }

  .desk-wide-flush--bottom {
    margin: 0 !important;
  }
}
/**
 * Table wrapper - makes tables work on tiny screens by letting them
 * scroll L/R whilst clipping the overflow so its only scrolling within a box.
 */
.table-wrapper {
  overflow-x: auto;
}
.table-wrapper table {
  min-width: 320px;
}

/**
 * This extends the defualt push/pull to just turn it off responsively.
 *
 * We do this and then we don't have to turn on the
 * responsive push/pull which is huge as typically we
 * just need to turn it off for mobile and leave on
 * for everything else
 */
@media only screen and (max-width: 569px) {
  .push--palm-none {
    left: auto;
  }

  .pull--palm-none {
    right: auto;
  }
}
@media only screen and (min-width: 570px) and (max-width: 1023px) {
  .push--lap-none {
    left: auto;
  }

  .pull--lap-none {
    right: auto;
  }
}
@media only screen and (min-width: 570px) {
  .push--lap-and-up-none {
    left: auto;
  }

  .pull--lap-and-up-none {
    right: auto;
  }
}
@media only screen and (max-width: 1023px) {
  .push--portable-none {
    left: auto;
  }

  .pull--portable-none {
    right: auto;
  }
}
@media only screen and (min-width: 1024px) {
  .push--desk-none {
    left: auto;
  }

  .pull--desk-none {
    right: auto;
  }
}
@media only screen and (min-width: 1200px) {
  .push--desk-wide-none {
    left: auto;
  }

  .pull--desk-wide-none {
    right: auto;
  }
}
/* endif */
/**
 * Site header
 */
.site__header {
  overflow: hidden;
  position: relative;
  z-index: 2;
  -ms-box-shadow: 0 5px 14px #cccccc;
  -o-box-shadow: 0 5px 14px #cccccc;
  box-shadow: 0 5px 14px #cccccc;
}

/**
 * Trigger for off canvas menu
 * AO: edit colours for accessibility and for project
 */
.site__header__menu-btn {
  background: none;
  border: 0;
  padding: 0;
  position: absolute;
  top: 14px;
  right: 14px;
}
.site__header__menu-btn span {
  display: block;
  font-size: 16px;
  font-size: 0.8888888889rem;
  text-transform: uppercase;
  font-weight: bold;
  color: #00857E;
  padding: 4.6666666667px 9.3333333333px;
  border: 2px solid #00857E;
  border-radius: 4px;
}
.site__header__menu-btn:active span, .site__header__menu-btn:focus, .site__header__menu-btn:hover span {
  background-color: #00857E;
  color: #fff;
  border-color: #00857E;
}
.site__header__menu-btn:focus {
  outline: 0;
}
.site__header__menu-btn .icon__cancel {
  display: none;
}

/**
 * Active state
 */
.site__header__menu-btn--active span {
  display: none;
}
.site__header__menu-btn--active .icon__cancel {
  display: block;
}

.site__header__logo {
  margin: 56px auto 28px auto;
  display: block !important;
}

.site__header__freeukgen-logo {
  margin: 0 auto 28px auto;
  display: block;
}

/**
 * Off canvas nav
 */
.site__header__nav {
  z-index: 1;
}
.site__header__nav .main-nav ul {
  margin-top: 0;
}
.site__header__nav .main-nav a {
  background: #f4f4f4;
  text-transform: uppercase;
  /**
  <% if MyopicVicar::Application.config.template_set=='freecen' %>
          color: $lavender-on-light;
  <% elsif MyopicVicar::Application.config.template_set=='freereg' %>
          color: $turquoise-on-light;
  <% else %>
          color: $magenta-on-light;
  <% end %>
  */
  /**
      jc set colour manually 
  */
  color: #0078a3;
  font-weight: normal;
  padding: 14px;
}
.site__header__nav .main-nav a:active, .site__header__nav .main-nav a:focus, .site__header__nav .main-nav a:hover {
  background: #b8ecff;
  color: #333344;
}
.site__header__nav .social-links {
  display: none;
}
/*** Adsense Banners ***/
.bnner-horz-secondary {
  width: 320px;
  height: 50px;
  background-position: -60px;
  background-size: 170%;
}
@media only screen and (max-width: 448px) {
  .bnner-horz-secondary {
    display: none;
  }
}

.adblck-background {
  background-image: url(image-path("header-donate.png")) !important;
}

.adsense_center, .adsense_box {
  margin: 0 auto;
  font-weight: bold;
  margin-bottom: 20px;
  border: 1px solid #c0c0c0;
  padding: 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
}
@media only screen and (max-width: 448px) {
  .adsense_center, .adsense_box {
    display: none;
  }
}

/**
 * Site content
 */
.site__content {
  position: relative;
  z-index: 1;
  padding-top: 56px;
}

.icon__honeycomb--top-right {
  width: 100% !important;
  height: auto !important;
  background-position: top right;
}

/**
 * Site footer
 */
.icon__honeycomb--bottom-left {
  width: 100% !important;
  height: auto !important;
  background-position: bottom left;
}

/**
 * A list of icons
 */
.icon-list {
  margin: 56px 0;
}
.icon-list li {
  display: block;
  margin-bottom: 28px;
}

/**
 * Extracted from BMD2 Dec 2019
 * needed for Font awesome
 */
li i {
  padding-right: 1px;
}

.social_links a {
  display: inline-block !important;
}
/*# sourceMappingURL=palm.css.map */